@page "/battery-simulation"
@using myenergy.Services
@using myenergy.Models
@inject BatterySimulationService SimulationService
@inject IOdsPricingService PricingService
@inject PricingConfigService PricingConfig
@inject EnergyDataService EnergyService
@inject IJSRuntime JS

<PageTitle>Battery Simulation - myenergy</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4"><i class="bi bi-battery-charging"></i> Battery Cost Simulation</h1>
    <p class="lead">Compare fixed vs dynamic pricing with different battery configurations</p>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Running simulation...</p>
        </div>
    }
    else if (simulationResults != null)
    {
        <!-- Configuration Summary -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-gear"></i> Simulation Configuration</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <label class="form-label">Year</label>
                                <select class="form-select" @bind="selectedYear" @bind:after="RunSimulationAsync">
                                    @foreach (var year in availableYears)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Battery Capacity (kWh)</label>
                                <select class="form-select" @bind="batteryCapacity" @bind:after="RunSimulationAsync">
                                    <option value="0">No Battery</option>
                                    <option value="5">5 kWh</option>
                                    <option value="10">10 kWh</option>
                                    <option value="15">15 kWh</option>
                                    <option value="20">20 kWh</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Fixed Import Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedImportPrice" @bind:after="RunSimulationAsync" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Fixed Export Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedExportPrice" @bind:after="RunSimulationAsync" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Key Metrics -->
        @if (simulationResults != null && simNoBatteryFixed != null && simWithBatteryFixed != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-danger">
                        <div class="card-body">
                            <h6 class="card-title">Fixed Tariff (No Battery)</h6>
                            <h3 class="mb-0">€@simNoBatteryFixed.TotalCostNoBatteryFixed.ToString("N2")</h3>
                            <small>Annual cost</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body">
                            <h6 class="card-title">Dynamic Tariff (No Battery)</h6>
                            <h3 class="mb-0">€@simulationResults.TotalCostNoBatteryDynamic.ToString("N2")</h3>
                            <small>Saves €@((simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostNoBatteryDynamic).ToString("N2"))</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-info">
                        <div class="card-body">
                            <h6 class="card-title">Fixed + Battery (@(batteryCapacity)kWh)</h6>
                            <h3 class="mb-0">€@simWithBatteryFixed.TotalCostWithBatteryFixed.ToString("N2")</h3>
                            <small>Saves €@((simNoBatteryFixed.TotalCostNoBatteryFixed - simWithBatteryFixed.TotalCostWithBatteryFixed).ToString("N2"))</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body">
                            <h6 class="card-title">Dynamic + Battery (@(batteryCapacity)kWh)</h6>
                            <h3 class="mb-0">€@simulationResults.TotalCostWithBatteryDynamic.ToString("N2")</h3>
                            <small>Saves €@((simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostWithBatteryDynamic).ToString("N2"))</small>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Comparison Charts -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Annual Cost Comparison</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="costComparisonChart" style="max-height: 300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Savings Breakdown</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="savingsBreakdownChart" style="max-height: 300px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cumulative Cost Over Time -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Cumulative Cost Over Time</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="cumulativeCostChart" style="max-height: 400px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Battery Performance -->
        @if (batteryCapacity > 0)
        {
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Battery Throughput</h6>
                            <h3 class="text-primary">@(simulationResults?.TotalBatteryThroughput.ToString("N1") ?? "0") kWh</h3>
                            <small class="text-muted">Total energy cycled through battery</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Battery Efficiency Loss</h6>
                            <h3 class="text-warning">@(simulationResults?.TotalBatteryLoss.ToString("N1") ?? "0") kWh</h3>
                            <small class="text-muted">@((simulationResults != null && simulationResults.TotalBatteryThroughput > 0 ? (simulationResults.TotalBatteryLoss / simulationResults.TotalBatteryThroughput * 100).ToString("N1") : "0"))% loss</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Daily Average Cycles</h6>
                            <h3 class="text-info">@((simulationResults?.TotalBatteryThroughput / batteryCapacity / (simulationResults?.DailyResults.Count ?? 1) ?? 0).ToString("N2"))</h3>
                            <small class="text-muted">Full charge/discharge cycles per day</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Battery State of Charge Over Week -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Battery State of Charge (First Week Sample)</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="batterySocChart" style="max-height: 300px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Daily Details Table -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Top 10 Days with Highest Savings</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Fixed (No Bat.)</th>
                                        <th>Dynamic (No Bat.)</th>
                                        <th>Dynamic + Battery</th>
                                        <th>Total Savings</th>
                                        <th>Battery Benefit</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var day in topSavingsDays)
                                    {
                                        var noBatFixed = simNoBatteryFixed != null ? GetDailySimulation(simNoBatteryFixed, day.Date) : null;
                                        var noBatDyn = simulationResults != null ? GetDailySimulation(simulationResults, day.Date) : null;
                                        var withBat = day;
                                        
                                        <tr>
                                            <td>@day.Date.ToString("MMM dd, yyyy")</td>
                                            <td class="text-danger">€@(noBatFixed?.CostNoBatteryFixed.ToString("N2") ?? "0.00")</td>
                                            <td class="text-warning">€@(noBatDyn?.CostNoBatteryDynamic.ToString("N2") ?? "0.00")</td>
                                            <td class="text-success">€@withBat.CostWithBatteryDynamic.ToString("N2")</td>
                                            <td class="text-success fw-bold">€@((noBatFixed?.CostNoBatteryFixed ?? 0 - withBat.CostWithBatteryDynamic).ToString("N2"))</td>
                                            <td class="text-info">€@((noBatDyn?.CostNoBatteryDynamic ?? 0 - withBat.CostWithBatteryDynamic).ToString("N2"))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Price Statistics -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Dynamic Price Statistics (@selectedYear)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <h6>Average Import Price</h6>
                                <p class="h4 text-danger">€@priceStats.avgImport.ToString("N4")/kWh</p>
                            </div>
                            <div class="col-md-3">
                                <h6>Average Export Price</h6>
                                <p class="h4 text-success">€@priceStats.avgExport.ToString("N4")/kWh</p>
                            </div>
                            <div class="col-md-3">
                                <h6>Import Price Range</h6>
                                <p class="h6">€@priceStats.minImport.ToString("N4") - €@priceStats.maxImport.ToString("N4")</p>
                            </div>
                            <div class="col-md-3">
                                <h6>Export Price Range</h6>
                                <p class="h6">€@priceStats.minExport.ToString("N4") - €@priceStats.maxExport.ToString("N4")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool shouldRenderCharts = false;
    private int selectedYear = 2024;
    private double batteryCapacity; // Initialized from config
    
    // Local pricing variables bound to UI (initialized from config)
    private double fixedImportPrice;
    private double fixedExportPrice;

    private List<int> availableYears = new();
    private SimulationResults? simulationResults;
    private SimulationResults? simNoBatteryFixed;
    private SimulationResults? simWithBatteryFixed;
    private List<DailySimulation> topSavingsDays = new();
    private (double avgImport, double avgExport, double minImport, double maxImport, double minExport, double maxExport) priceStats;

    protected override async Task OnInitializedAsync()
    {
        // Data is already loaded at app startup via DataInitializationService
        // Just initialize UI defaults from config
        batteryCapacity = PricingConfig.DefaultBatteryCapacityKwh;
        fixedImportPrice = PricingConfig.FixedImportPrice;
        fixedExportPrice = PricingConfig.FixedExportPrice;
        
        availableYears = EnergyService.GetAvailableYears();
        if (availableYears.Any())
        {
            selectedYear = availableYears.Max();
        }

        await RunSimulationAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts)
        {
            shouldRenderCharts = false;
            Console.WriteLine("OnAfterRenderAsync: About to render charts");
            await Task.Delay(200); // Give DOM time to settle
            await RenderCharts();
        }
    }

    private async Task RunSimulationAsync()
    {
        isLoading = true;
        shouldRenderCharts = false; // Reset flag
        StateHasChanged();

        try
        {
            Console.WriteLine("RunSimulationAsync: Starting simulations");
            
            // Run simulations
            simulationResults = await SimulationService.RunSimulation(selectedYear, batteryCapacity, fixedImportPrice, fixedExportPrice);
            simNoBatteryFixed = await SimulationService.RunSimulation(selectedYear, 0, fixedImportPrice, fixedExportPrice);
            simWithBatteryFixed = await SimulationService.RunSimulation(selectedYear, batteryCapacity, fixedImportPrice, fixedExportPrice);

            Console.WriteLine($"RunSimulationAsync: Simulations complete. Results count: {simulationResults?.DailyResults.Count ?? 0}");

            // Get price statistics
            priceStats = PricingService.GetPriceStatistics(selectedYear);

            // Find top savings days
            topSavingsDays = simulationResults?.DailyResults
                .OrderByDescending(d => d.CostNoBatteryDynamic - d.CostWithBatteryDynamic)
                .Take(10)
                .ToList() ?? new List<DailySimulation>();

            // Flag to render charts after next render
            shouldRenderCharts = true;
            Console.WriteLine("RunSimulationAsync: Set shouldRenderCharts = true");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"RunSimulationAsync error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render which will call OnAfterRenderAsync
        }
    }

    private async Task RenderCharts()
    {
        try
        {
            Console.WriteLine("RenderCharts: Starting");
            
            // Validate data exists
            if (simulationResults == null || simNoBatteryFixed == null || simWithBatteryFixed == null)
            {
                Console.WriteLine("RenderCharts: Simulation results are null");
                return;
            }

            if (!simulationResults.DailyResults.Any())
            {
                Console.WriteLine("RenderCharts: No daily results available");
                return;
            }

            Console.WriteLine($"RenderCharts: Starting with {simulationResults.DailyResults.Count} daily results");

            // Cost comparison bar chart
            var costs = new[] { 
                simNoBatteryFixed.TotalCostNoBatteryFixed, 
                simulationResults.TotalCostNoBatteryDynamic, 
                simWithBatteryFixed.TotalCostWithBatteryFixed, 
                simulationResults.TotalCostWithBatteryDynamic 
            };
            Console.WriteLine($"Cost comparison data: {string.Join(", ", costs.Select(c => c.ToString("F2")))}");
            await JS.InvokeVoidAsync("renderCostComparisonChart", costs);
            Console.WriteLine("Cost comparison chart rendered");

            // Savings breakdown
            var dynamicSaving = simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostNoBatteryDynamic;
            var batterySavingFixed = simNoBatteryFixed.TotalCostNoBatteryFixed - simWithBatteryFixed.TotalCostWithBatteryFixed;
            var batterySavingDynamic = simulationResults.TotalCostNoBatteryDynamic - simulationResults.TotalCostWithBatteryDynamic;
            var totalSaving = simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostWithBatteryDynamic;
            
            var savings = new[] { dynamicSaving, batterySavingFixed, batterySavingDynamic, totalSaving };
            Console.WriteLine($"Savings breakdown data: {string.Join(", ", savings.Select(s => s.ToString("F2")))}");
            await JS.InvokeVoidAsync("renderSavingsBreakdownChart", savings);
            Console.WriteLine("Savings breakdown chart rendered");

            // Cumulative cost over time
            var dates = simulationResults.DailyResults.Select(d => d.Date.ToString("MMM dd")).ToArray();
            var cumFixed = new List<double>();
            var cumDynNoBat = new List<double>();
            var cumDynWithBat = new List<double>();
            
            double totalFixed = 0, totalDynNoBat = 0, totalDynWithBat = 0;
            foreach (var day in simulationResults.DailyResults)
            {
                var fixedDay = GetDailySimulation(simNoBatteryFixed, day.Date);
                totalFixed += fixedDay?.CostNoBatteryFixed ?? 0;
                totalDynNoBat += day.CostNoBatteryDynamic;
                totalDynWithBat += day.CostWithBatteryDynamic;
                
                cumFixed.Add(totalFixed);
                cumDynNoBat.Add(totalDynNoBat);
                cumDynWithBat.Add(totalDynWithBat);
            }
            
            Console.WriteLine($"Cumulative cost chart: {dates.Length} dates, {cumFixed.Count} fixed, {cumDynNoBat.Count} no battery, {cumDynWithBat.Count} with battery");
            await JS.InvokeVoidAsync("renderCumulativeCostChart", dates, cumFixed.ToArray(), cumDynNoBat.ToArray(), cumDynWithBat.ToArray());
            Console.WriteLine("Cumulative cost chart rendered");

            // Battery SoC (first week)
            if (batteryCapacity > 0)
            {
                var firstWeek = simulationResults.DailyResults.Take(7).SelectMany(d => d.Intervals).ToList();
                var socTimes = firstWeek.Select(i => i.Time.ToString("ddd HH:mm")).ToArray();
                var socLevels = firstWeek.Select(i => i.BatterySoC).ToArray();
                
                Console.WriteLine($"Battery SoC chart: {socTimes.Length} time points, capacity: {batteryCapacity} kWh");
                await JS.InvokeVoidAsync("renderBatterySocChart", socTimes, socLevels, batteryCapacity);
                Console.WriteLine("Battery SoC chart rendered");
            }
            
            Console.WriteLine("RenderCharts: All charts rendered successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"RenderCharts error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private DailySimulation? GetDailySimulation(SimulationResults results, DateTime date)
    {
        return results.DailyResults.FirstOrDefault(d => d.Date.Date == date.Date);
    }
}
