@page "/daily-detail"
@using myenergy.Models
@using myenergy.Services
@using Microsoft.AspNetCore.Components
@inject EnergyDataService DataService
@inject IOdsPricingService OdsService
@inject PricingConfigService PricingConfig

<PageTitle>Daily Detail - SolarViz</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-9">
            <h2>ðŸ“Š Daily Energy Detail - 15 Minute Intervals</h2>
            <p class="text-muted">Detailed analysis with 15-minute interval data showing solar production, grid usage, injection, and gas consumption</p>
        </div>
    </div>

    <!-- Date Selection -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="dateInput" class="form-label fw-bold">Select Date:</label>
            <input type="date" 
                   id="dateInput" 
                   class="form-control form-control-lg" 
                   value="@SelectedDate.ToString("yyyy-MM-dd")"
                   @onchange="OnDateChanged"
                   max="@DateTime.Today.ToString("yyyy-MM-dd")" />
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Navigation:</label>
            <div class="btn-group w-100" role="group">
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="PreviousDay" disabled="@(!HasPreviousDay())">
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="GoToToday" disabled="@IsToday()">
                    <i class="fas fa-calendar-day"></i> Today
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="NextDay" disabled="@(!HasNextDay())">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Quick Select:</label>
            <div class="btn-group w-100" role="group">
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(0)">Today</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-1)">Yesterday</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-7)">Week Ago</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-30)">Month Ago</button>
            </div>
        </div>
    </div>

    <!-- Dynamic Pricing Settings -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="ShowDynamicPricing" @bind:after="OnDynamicPricingToggled" id="showDynamicPricing">
                                <label class="form-check-label fw-bold" for="showDynamicPricing">
                                    <i class="bi bi-graph-up"></i> Show ODS Pricing
                                </label>
                            </div>
                        </div>
                        @if (ShowDynamicPricing)
                        {
                            <div class="col-md-3">
                                <small class="text-muted">
                                    @if (!string.IsNullOrEmpty(odsPricingDateRange))
                                    {
                                        <span>@odsPricingDateRange</span>
                                    }
                                    else
                                    {
                                        <span class="text-warning">No ODS data available</span>
                                    }
                                </small>
                            </div>
                            <div class="col-md-2">
                                <small class="text-muted">Import: â‚¬@PricingConfig.FixedImportPrice.ToString("F2")/kWh (fixed)</small><br/>
                                <small class="text-muted">Export: â‚¬@PricingConfig.FixedExportPrice.ToString("F2")/kWh (fixed)</small>
                            </div>
                            <div class="col-md-3">
                                @if (OdsService.IsDataLoaded)
                                {
                                    <small class="text-success"><i class="bi bi-check-circle"></i> ODS data loaded</small>
                                    @if (OdsService.LastLoadTime.HasValue)
                                    {
                                        <br/><small class="text-muted">Updated: @OdsService.LastLoadTime.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                    }
                                }
                                else
                                {
                                    <small class="text-danger"><i class="bi bi-x-circle"></i> ODS data not loaded</small>
                                }
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="RefreshOdsData" disabled="@isRefreshingOds">
                                    @if (isRefreshingOds)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Refreshing...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-repeat"></i>
                                        <span> Refresh ODS</span>
                                    }
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 h5">Loading detailed data for @SelectedDate.ToString("MMMM dd, yyyy")...</p>
        </div>
    }
    else if (DetailData != null)
    {
        <!-- Detailed Day Chart Component -->
        <DetailedDayChart DetailData="@DetailData" 
                         ShowDynamicPricing="@ShowDynamicPricing"
                         OdsPricingData="@DailyOdsPricing" />
    }
    else
    {
        <div class="alert alert-warning alert-lg">
            <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
            <h5 class="alert-heading">No Data Available</h5>
            <p class="mb-0">No detailed 15-minute interval data available for @SelectedDate.ToString("MMMM dd, yyyy").</p>
            <hr />
            <p class="mb-0">
                <button class="btn btn-warning" @onclick="GoToToday">Go to Today</button>
                <button class="btn btn-outline-warning ms-2" @onclick="SelectMostRecentDate">Go to Most Recent Data</button>
            </p>
        </div>
    }
</div>

@code {
    private DateTime SelectedDate = DateTime.Today;
    private DailyDetailData? DetailData;
    private bool Loading = false;
    private List<DateTime> AvailableDates = new();
    
    // Dynamic pricing support
    private bool ShowDynamicPricing = false;
    private bool isRefreshingOds = false;
    private string odsPricingDateRange = "";
    private List<OdsPricing> DailyOdsPricing = new();

    protected override async Task OnInitializedAsync()
    {
        // Data already loaded at app startup
        UpdateOdsPricingInfo();
        
        // Get available dates
        AvailableDates = DataService.GetAvailableDates();
        
        // Default to current date if available, otherwise most recent
        if (AvailableDates.Contains(DateTime.Today))
        {
            SelectedDate = DateTime.Today;
        }
        else if (AvailableDates.Any())
        {
            SelectedDate = AvailableDates.OrderByDescending(d => d).First();
        }
        
        await LoadDayData();
    }
    
    private void UpdateOdsPricingInfo()
    {
        var odsRange = OdsService.GetDataRange();
        if (odsRange.HasValue)
        {
            odsPricingDateRange = $"Available: {odsRange.Value.start:dd/MM/yyyy} - {odsRange.Value.end:dd/MM/yyyy}";
        }
        else
        {
            odsPricingDateRange = "";
        }
    }
    
    private Task OnDynamicPricingToggled()
    {
        if (ShowDynamicPricing && DetailData != null)
        {
            // Load ODS pricing for the selected day
            DailyOdsPricing = OdsService.GetPricingForDay(SelectedDate);
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private async Task RefreshOdsData()
    {
        isRefreshingOds = true;
        StateHasChanged();
        
        try
        {
            await OdsService.RefreshFromEliaAsync();
            UpdateOdsPricingInfo();
            
            // Reload pricing data for current day
            if (ShowDynamicPricing && DetailData != null)
            {
                DailyOdsPricing = OdsService.GetPricingForDay(SelectedDate);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing ODS data: {ex.Message}");
        }
        finally
        {
            isRefreshingOds = false;
            StateHasChanged();
        }
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
        {
            SelectedDate = newDate;
            await LoadDayData();
        }
    }

    private async Task SelectRelativeDate(int daysOffset)
    {
        SelectedDate = DateTime.Today.AddDays(daysOffset);
        await LoadDayData();
    }

    private async Task PreviousDay()
    {
        var previousDates = AvailableDates.Where(d => d < SelectedDate).OrderByDescending(d => d);
        if (previousDates.Any())
        {
            SelectedDate = previousDates.First();
            await LoadDayData();
        }
    }

    private async Task NextDay()
    {
        var nextDates = AvailableDates.Where(d => d > SelectedDate).OrderBy(d => d);
        if (nextDates.Any())
        {
            SelectedDate = nextDates.First();
            await LoadDayData();
        }
    }

    private async Task GoToToday()
    {
        SelectedDate = DateTime.Today;
        await LoadDayData();
    }

    private async Task SelectMostRecentDate()
    {
        if (AvailableDates.Any())
        {
            SelectedDate = AvailableDates.OrderByDescending(d => d).First();
            await LoadDayData();
        }
    }

    private async Task LoadDayData()
    {
        Loading = true;
        StateHasChanged();

        await Task.Delay(50); // Small delay for UI feedback
        
        DetailData = DataService.GetDailyDetailData(SelectedDate);
        
        // Load ODS pricing for this day if enabled
        if (ShowDynamicPricing && DetailData != null)
        {
            DailyOdsPricing = OdsService.GetPricingForDay(SelectedDate);
        }
        
        Loading = false;
        StateHasChanged();
    }

    private bool HasPreviousDay()
    {
        return AvailableDates.Any(d => d < SelectedDate);
    }

    private bool HasNextDay()
    {
        return AvailableDates.Any(d => d > SelectedDate && d <= DateTime.Today);
    }

    private bool IsToday()
    {
        return SelectedDate.Date == DateTime.Today.Date;
    }
}
