@page "/daily-detail"
@using myenergy.Models
@using myenergy.Services
@using Microsoft.AspNetCore.Components
@inject EnergyDataService DataService

<PageTitle>Daily Detail - SolarViz</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-9">
            <h2>ðŸ“Š Daily Energy Detail - 15 Minute Intervals</h2>
            <p class="text-muted">Detailed analysis with 15-minute interval data showing solar production, grid usage, injection, and gas consumption</p>
        </div>
    </div>

    <!-- Date Selection -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="dateInput" class="form-label fw-bold">Select Date:</label>
            <input type="date" 
                   id="dateInput" 
                   class="form-control form-control-lg" 
                   value="@SelectedDate.ToString("yyyy-MM-dd")"
                   @onchange="OnDateChanged"
                   max="@DateTime.Today.ToString("yyyy-MM-dd")" />
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Navigation:</label>
            <div class="btn-group w-100" role="group">
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="PreviousDay" disabled="@(!HasPreviousDay())">
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="GoToToday" disabled="@IsToday()">
                    <i class="fas fa-calendar-day"></i> Today
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg" @onclick="NextDay" disabled="@(!HasNextDay())">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">Quick Select:</label>
            <div class="btn-group w-100" role="group">
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(0)">Today</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-1)">Yesterday</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-7)">Week Ago</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="() => SelectRelativeDate(-30)">Month Ago</button>
            </div>
        </div>
    </div>

    @if (Loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 h5">Loading detailed data for @SelectedDate.ToString("MMMM dd, yyyy")...</p>
        </div>
    }
    else if (DetailData != null)
    {
        <!-- Detailed Day Chart Component -->
        <DetailedDayChart DetailData="@DetailData" />
    }
    else
    {
        <div class="alert alert-warning alert-lg">
            <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
            <h5 class="alert-heading">No Data Available</h5>
            <p class="mb-0">No detailed 15-minute interval data available for @SelectedDate.ToString("MMMM dd, yyyy").</p>
            <hr />
            <p class="mb-0">
                <button class="btn btn-warning" @onclick="GoToToday">Go to Today</button>
                <button class="btn btn-outline-warning ms-2" @onclick="SelectMostRecentDate">Go to Most Recent Data</button>
            </p>
        </div>
    }
</div>

@code {
    private DateTime SelectedDate = DateTime.Today;
    private DailyDetailData? DetailData;
    private bool Loading = false;
    private List<DateTime> AvailableDates = new();

    protected override async Task OnInitializedAsync()
    {
        // Get available dates
        AvailableDates = DataService.GetAvailableDates();
        
        // Default to current date if available, otherwise most recent
        if (AvailableDates.Contains(DateTime.Today))
        {
            SelectedDate = DateTime.Today;
        }
        else if (AvailableDates.Any())
        {
            SelectedDate = AvailableDates.OrderByDescending(d => d).First();
        }
        
        await LoadDayData();
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
        {
            SelectedDate = newDate;
            await LoadDayData();
        }
    }

    private async Task SelectRelativeDate(int daysOffset)
    {
        SelectedDate = DateTime.Today.AddDays(daysOffset);
        await LoadDayData();
    }

    private async Task PreviousDay()
    {
        var previousDates = AvailableDates.Where(d => d < SelectedDate).OrderByDescending(d => d);
        if (previousDates.Any())
        {
            SelectedDate = previousDates.First();
            await LoadDayData();
        }
    }

    private async Task NextDay()
    {
        var nextDates = AvailableDates.Where(d => d > SelectedDate).OrderBy(d => d);
        if (nextDates.Any())
        {
            SelectedDate = nextDates.First();
            await LoadDayData();
        }
    }

    private async Task GoToToday()
    {
        SelectedDate = DateTime.Today;
        await LoadDayData();
    }

    private async Task SelectMostRecentDate()
    {
        if (AvailableDates.Any())
        {
            SelectedDate = AvailableDates.OrderByDescending(d => d).First();
            await LoadDayData();
        }
    }

    private async Task LoadDayData()
    {
        Loading = true;
        StateHasChanged();

        await Task.Delay(50); // Small delay for UI feedback
        
        DetailData = DataService.GetDailyDetailData(SelectedDate);
        
        Loading = false;
        StateHasChanged();
    }

    private bool HasPreviousDay()
    {
        return AvailableDates.Any(d => d < SelectedDate);
    }

    private bool HasNextDay()
    {
        return AvailableDates.Any(d => d > SelectedDate && d <= DateTime.Today);
    }

    private bool IsToday()
    {
        return SelectedDate.Date == DateTime.Today.Date;
    }
}
