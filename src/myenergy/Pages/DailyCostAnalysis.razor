@page "/daily-cost-analysis"
@using myenergy.Services
@using myenergy.Models
@inject BatterySimulationService SimulationService
@inject OdsPricingService PricingService
@inject PricingConfigService PricingConfig
@inject EnergyDataService EnergyService
@inject IJSRuntime JS

<PageTitle>Daily Cost Analysis - myenergy</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4"><i class="bi bi-graph-up"></i> Daily Cost Analysis</h1>
    <p class="lead">Day-by-day breakdown of energy costs and battery performance</p>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Running analysis...</p>
        </div>
    }
    else if (simulationResults != null)
    {
        <!-- Configuration Panel -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-sliders"></i> Analysis Parameters</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <label class="form-label">Year</label>
                                <select class="form-select" @bind="selectedYear" @bind:after="RunAnalysisAsync">
                                    @foreach (var year in availableYears)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Battery Capacity (kWh)</label>
                                <select class="form-select" @bind="batteryCapacity" @bind:after="RunAnalysisAsync">
                                    <option value="5">5 kWh</option>
                                    <option value="10">10 kWh</option>
                                    <option value="15">15 kWh</option>
                                    <option value="20">20 kWh</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Fixed Import Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedImportPrice" @bind:after="RunAnalysisAsync" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Fixed Export Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedExportPrice" @bind:after="RunAnalysisAsync" />
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Chart View</label>
                                <select class="form-select" @bind="chartView" @bind:after="RenderCharts">
                                    <option value="daily">Daily Costs</option>
                                    <option value="cumulative">Cumulative Costs</option>
                                    <option value="savings">Daily Savings</option>
                                    <option value="all">All Metrics Combined</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Time Period</label>
                                <select class="form-select" @bind="timePeriod" @bind:after="RenderCharts">
                                    <option value="all">Full Year</option>
                                    <option value="q1">Q1 (Jan-Mar)</option>
                                    <option value="q2">Q2 (Apr-Jun)</option>
                                    <option value="q3">Q3 (Jul-Sep)</option>
                                    <option value="q4">Q4 (Oct-Dec)</option>
                                    <option value="jan">January</option>
                                    <option value="feb">February</option>
                                    <option value="mar">March</option>
                                    <option value="apr">April</option>
                                    <option value="may">May</option>
                                    <option value="jun">June</option>
                                    <option value="jul">July</option>
                                    <option value="aug">August</option>
                                    <option value="sep">September</option>
                                    <option value="oct">October</option>
                                    <option value="nov">November</option>
                                    <option value="dec">December</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-white bg-danger">
                    <div class="card-body">
                        <h6 class="card-title">Fixed (No Battery)</h6>
                        <h3 class="mb-0">€@simNoBatteryFixed.TotalCostNoBatteryFixed.ToString("N2")</h3>
                        <small>Baseline annual cost</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-warning">
                    <div class="card-body">
                        <h6 class="card-title">Dynamic (No Battery)</h6>
                        <h3 class="mb-0">€@simulationResults.TotalCostNoBatteryDynamic.ToString("N2")</h3>
                        <small>-€@((simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostNoBatteryDynamic).ToString("N2"))</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-success">
                    <div class="card-body">
                        <h6 class="card-title">Dynamic + Battery</h6>
                        <h3 class="mb-0">€@simulationResults.TotalCostWithBatteryDynamic.ToString("N2")</h3>
                        <small>-€@((simNoBatteryFixed.TotalCostNoBatteryFixed - simulationResults.TotalCostWithBatteryDynamic).ToString("N2"))</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-info">
                    <div class="card-body">
                        <h6 class="card-title">Battery Benefit</h6>
                        <h3 class="mb-0">€@((simulationResults.TotalCostNoBatteryDynamic - simulationResults.TotalCostWithBatteryDynamic).ToString("N2"))</h3>
                        <small>Battery savings on dynamic</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Daily Cost Chart -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            @if (chartView == "daily")
                            {
                                <span>Daily Energy Costs</span>
                            }
                            else if (chartView == "cumulative")
                            {
                                <span>Cumulative Costs Over Time</span>
                            }
                            else if (chartView == "savings")
                            {
                                <span>Daily Savings Comparison</span>
                            }
                            else
                            {
                                <span>Complete Daily Analysis</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="mainDailyChart" style="max-height: 500px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Daily Breakdown Table -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-table"></i> Daily Cost Breakdown
                            <span class="badge bg-secondary float-end">@filteredDays.Count days</span>
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                            <table class="table table-striped table-hover table-sm">
                                <thead class="sticky-top bg-white">
                                    <tr>
                                        <th>Date</th>
                                        <th class="text-end">Fixed (No Bat.)</th>
                                        <th class="text-end">Dynamic (No Bat.)</th>
                                        <th class="text-end">Dynamic + Battery</th>
                                        <th class="text-end">Total Savings</th>
                                        <th class="text-end">Battery Benefit</th>
                                        <th class="text-center">Savings %</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var day in filteredDays)
                                    {
                                        var noBatFixed = GetDailySimulation(simNoBatteryFixed, day.Date);
                                        var noBatDyn = GetDailySimulation(simulationResults, day.Date);
                                        var withBat = day;
                                        
                                        var fixedCost = noBatFixed?.CostNoBatteryFixed ?? 0;
                                        var dynamicNoBatCost = noBatDyn?.CostNoBatteryDynamic ?? 0;
                                        var dynamicWithBatCost = withBat.CostWithBatteryDynamic;
                                        var totalSavings = fixedCost - dynamicWithBatCost;
                                        var batterySavings = dynamicNoBatCost - dynamicWithBatCost;
                                        var savingsPercent = fixedCost > 0 ? (totalSavings / fixedCost * 100) : 0;

                                        <tr>
                                            <td>
                                                <strong>@day.Date.ToString("MMM dd, yyyy")</strong>
                                                <br />
                                                <small class="text-muted">@day.Date.DayOfWeek</small>
                                            </td>
                                            <td class="text-end text-danger">€@fixedCost.ToString("N2")</td>
                                            <td class="text-end text-warning">€@dynamicNoBatCost.ToString("N2")</td>
                                            <td class="text-end text-success fw-bold">€@dynamicWithBatCost.ToString("N2")</td>
                                            <td class="text-end">
                                                <span class="badge @(totalSavings > 0 ? "bg-success" : "bg-danger")">
                                                    €@totalSavings.ToString("N2")
                                                </span>
                                            </td>
                                            <td class="text-end">
                                                <span class="badge @(batterySavings > 0 ? "bg-info" : "bg-secondary")">
                                                    €@batterySavings.ToString("N2")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge @(savingsPercent > 30 ? "bg-success" : savingsPercent > 15 ? "bg-warning" : "bg-secondary")">
                                                    @savingsPercent.ToString("N1")%
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="sticky-bottom bg-light">
                                    <tr class="fw-bold">
                                        <td>TOTAL / AVERAGE</td>
                                        <td class="text-end text-danger">€@filteredDays.Sum(d => GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0).ToString("N2")</td>
                                        <td class="text-end text-warning">€@filteredDays.Sum(d => d.CostNoBatteryDynamic).ToString("N2")</td>
                                        <td class="text-end text-success">€@filteredDays.Sum(d => d.CostWithBatteryDynamic).ToString("N2")</td>
                                        <td class="text-end">
                                            €@filteredDays.Sum(d => {
                                                var fixedCost = GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0;
                                                return fixedCost - d.CostWithBatteryDynamic;
                                            }).ToString("N2")
                                        </td>
                                        <td class="text-end">
                                            €@filteredDays.Sum(d => d.CostNoBatteryDynamic - d.CostWithBatteryDynamic).ToString("N2")
                                        </td>
                                        <td class="text-center">
                                            @{
                                                var totalFixed = filteredDays.Sum(d => GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0);
                                                var totalWithBat = filteredDays.Sum(d => d.CostWithBatteryDynamic);
                                                var avgSavingsPercent = totalFixed > 0 ? ((totalFixed - totalWithBat) / totalFixed * 100) : 0;
                                            }
                                            @avgSavingsPercent.ToString("N1")%
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Monthly Summary -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-calendar-month"></i> Monthly Summary</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="monthlySummaryChart" style="max-height: 400px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Battery Performance Metrics (if battery selected) -->
        @if (batteryCapacity > 0)
        {
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-battery-charging"></i> Battery Daily Energy Throughput
                                <small class="text-muted ms-2">(Total charged/discharged per day - can exceed capacity)</small>
                            </h5>
                        </div>
                        <div class="card-body">
                            <canvas id="batteryPerformanceChart" style="max-height: 300px;"></canvas>
                            <div class="alert alert-info mt-3 mb-0">
                                <i class="bi bi-info-circle"></i>
                                <strong>Note:</strong> Daily throughput shows the total energy charged/discharged throughout the day across all 96 15-minute intervals. 
                                This can exceed the battery capacity (@batteryCapacity kWh) because the battery may charge and discharge multiple times per day. 
                                The dashed red line shows your battery capacity for reference.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private bool shouldRenderCharts = false;
    private int selectedYear = 2024;
    private double batteryCapacity; // Initialized from config
    private double fixedImportPrice; // Initialized from config
    private double fixedExportPrice; // Initialized from config
    private string chartView = "daily";
    private string timePeriod = "all";

    private List<int> availableYears = new();
    private SimulationResults? simulationResults;
    private SimulationResults? simNoBatteryFixed;
    private List<DailySimulation> filteredDays = new();

    protected override async Task OnInitializedAsync()
    {
        // Data already loaded at app startup
        // Initialize defaults from config
        batteryCapacity = PricingConfig.DefaultBatteryCapacityKwh;
        fixedImportPrice = PricingConfig.FixedImportPrice;
        fixedExportPrice = PricingConfig.FixedExportPrice;
        
        availableYears = EnergyService.GetAvailableYears();
        if (availableYears.Any())
        {
            selectedYear = availableYears.Max();
        }

        await RunAnalysisAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts)
        {
            shouldRenderCharts = false;
            await Task.Delay(200); // Give DOM time to settle
            await RenderCharts();
        }
    }

    private async Task RunAnalysisAsync()
    {
        isLoading = true;
        shouldRenderCharts = false; // Reset flag
        StateHasChanged();

        try
        {
            // Run simulations
            simulationResults = await SimulationService.RunSimulation(selectedYear, batteryCapacity, fixedImportPrice, fixedExportPrice);
            simNoBatteryFixed = await SimulationService.RunSimulation(selectedYear, 0, fixedImportPrice, fixedExportPrice);

            FilterDaysByPeriod();
            
            // Flag to render charts after next render
            shouldRenderCharts = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render which will call OnAfterRenderAsync
        }
    }

    private void FilterDaysByPeriod()
    {
        if (simulationResults == null) return;

        filteredDays = timePeriod switch
        {
            "q1" => simulationResults.DailyResults.Where(d => d.Date.Month >= 1 && d.Date.Month <= 3).ToList(),
            "q2" => simulationResults.DailyResults.Where(d => d.Date.Month >= 4 && d.Date.Month <= 6).ToList(),
            "q3" => simulationResults.DailyResults.Where(d => d.Date.Month >= 7 && d.Date.Month <= 9).ToList(),
            "q4" => simulationResults.DailyResults.Where(d => d.Date.Month >= 10 && d.Date.Month <= 12).ToList(),
            "jan" => simulationResults.DailyResults.Where(d => d.Date.Month == 1).ToList(),
            "feb" => simulationResults.DailyResults.Where(d => d.Date.Month == 2).ToList(),
            "mar" => simulationResults.DailyResults.Where(d => d.Date.Month == 3).ToList(),
            "apr" => simulationResults.DailyResults.Where(d => d.Date.Month == 4).ToList(),
            "may" => simulationResults.DailyResults.Where(d => d.Date.Month == 5).ToList(),
            "jun" => simulationResults.DailyResults.Where(d => d.Date.Month == 6).ToList(),
            "jul" => simulationResults.DailyResults.Where(d => d.Date.Month == 7).ToList(),
            "aug" => simulationResults.DailyResults.Where(d => d.Date.Month == 8).ToList(),
            "sep" => simulationResults.DailyResults.Where(d => d.Date.Month == 9).ToList(),
            "oct" => simulationResults.DailyResults.Where(d => d.Date.Month == 10).ToList(),
            "nov" => simulationResults.DailyResults.Where(d => d.Date.Month == 11).ToList(),
            "dec" => simulationResults.DailyResults.Where(d => d.Date.Month == 12).ToList(),
            _ => simulationResults.DailyResults.ToList()
        };
    }

    private async Task RenderCharts()
    {
        if (simulationResults == null || simNoBatteryFixed == null) return;
        
        await Task.Delay(100); // Allow DOM to update

        var dates = filteredDays.Select(d => d.Date.ToString("MMM dd")).ToArray();
        
        // Main daily chart based on selected view
        if (chartView == "daily")
        {
            await RenderDailyCostsChart(dates);
        }
        else if (chartView == "cumulative")
        {
            await RenderCumulativeCostsChart(dates);
        }
        else if (chartView == "savings")
        {
            await RenderDailySavingsChart(dates);
        }
        else // all
        {
            await RenderAllMetricsChart(dates);
        }

        // Monthly summary
        await RenderMonthlySummaryChart();

        // Battery performance (if applicable)
        if (batteryCapacity > 0)
        {
            await RenderBatteryPerformanceChart(dates);
        }
    }

    private async Task RenderDailyCostsChart(string[] dates)
    {
        var fixedCosts = filteredDays.Select(d => GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0).ToArray();
        var dynamicNoBatCosts = filteredDays.Select(d => d.CostNoBatteryDynamic).ToArray();
        var dynamicWithBatCosts = filteredDays.Select(d => d.CostWithBatteryDynamic).ToArray();

        await JS.InvokeVoidAsync("renderDailyCostsChart", dates, fixedCosts, dynamicNoBatCosts, dynamicWithBatCosts);
    }

    private async Task RenderCumulativeCostsChart(string[] dates)
    {
        var cumFixed = new List<double>();
        var cumDynNoBat = new List<double>();
        var cumDynWithBat = new List<double>();
        
        double totalFixed = 0, totalDynNoBat = 0, totalDynWithBat = 0;
        foreach (var day in filteredDays)
        {
            var fixedDay = GetDailySimulation(simNoBatteryFixed, day.Date);
            totalFixed += fixedDay?.CostNoBatteryFixed ?? 0;
            totalDynNoBat += day.CostNoBatteryDynamic;
            totalDynWithBat += day.CostWithBatteryDynamic;
            
            cumFixed.Add(totalFixed);
            cumDynNoBat.Add(totalDynNoBat);
            cumDynWithBat.Add(totalDynWithBat);
        }

        await JS.InvokeVoidAsync("renderCumulativeDailyCostsChart", dates, cumFixed.ToArray(), cumDynNoBat.ToArray(), cumDynWithBat.ToArray());
    }

    private async Task RenderDailySavingsChart(string[] dates)
    {
        var totalSavings = filteredDays.Select(d => {
            var fixedCost = GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0;
            return fixedCost - d.CostWithBatteryDynamic;
        }).ToArray();
        
        var batterySavings = filteredDays.Select(d => d.CostNoBatteryDynamic - d.CostWithBatteryDynamic).ToArray();

        await JS.InvokeVoidAsync("renderDailySavingsChart", dates, totalSavings, batterySavings);
    }

    private async Task RenderAllMetricsChart(string[] dates)
    {
        var fixedCosts = filteredDays.Select(d => GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0).ToArray();
        var dynamicNoBatCosts = filteredDays.Select(d => d.CostNoBatteryDynamic).ToArray();
        var dynamicWithBatCosts = filteredDays.Select(d => d.CostWithBatteryDynamic).ToArray();
        var totalSavings = filteredDays.Select(d => {
            var fixedCost = GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0;
            return fixedCost - d.CostWithBatteryDynamic;
        }).ToArray();
        var batterySavings = filteredDays.Select(d => d.CostNoBatteryDynamic - d.CostWithBatteryDynamic).ToArray();

        await JS.InvokeVoidAsync("renderAllMetricsChart", dates, fixedCosts, dynamicNoBatCosts, dynamicWithBatCosts, totalSavings, batterySavings);
    }

    private async Task RenderMonthlySummaryChart()
    {
        var monthlyData = simulationResults!.DailyResults
            .GroupBy(d => d.Date.Month)
            .OrderBy(g => g.Key)
            .Select(g => new {
                Month = g.Key,
                FixedCost = g.Sum(d => GetDailySimulation(simNoBatteryFixed, d.Date)?.CostNoBatteryFixed ?? 0),
                DynamicNoBat = g.Sum(d => d.CostNoBatteryDynamic),
                DynamicWithBat = g.Sum(d => d.CostWithBatteryDynamic)
            })
            .ToList();

        var monthNames = monthlyData.Select(m => new DateTime(2024, m.Month, 1).ToString("MMMM")).ToArray();
        var fixedCosts = monthlyData.Select(m => m.FixedCost).ToArray();
        var dynamicNoBatCosts = monthlyData.Select(m => m.DynamicNoBat).ToArray();
        var dynamicWithBatCosts = monthlyData.Select(m => m.DynamicWithBat).ToArray();

        await JS.InvokeVoidAsync("renderMonthlySummaryChart", monthNames, fixedCosts, dynamicNoBatCosts, dynamicWithBatCosts);
    }

    private async Task RenderBatteryPerformanceChart(string[] dates)
    {
        var batteryCharged = filteredDays.Select(d => d.TotalBatteryCharged).ToArray();
        var batteryDischarged = filteredDays.Select(d => d.TotalBatteryDischarged).ToArray();
        var batterySavings = filteredDays.Select(d => d.CostNoBatteryDynamic - d.CostWithBatteryDynamic).ToArray();

        await JS.InvokeVoidAsync("renderBatteryPerformanceChart", dates, batteryCharged, batteryDischarged, batterySavings, batteryCapacity);
    }

    private DailySimulation? GetDailySimulation(SimulationResults results, DateTime date)
    {
        return results.DailyResults.FirstOrDefault(d => d.Date.Date == date.Date);
    }
}
