@page "/roi-analysis"
@using myenergy.Services
@using myenergy.Models
@inject RoiAnalysisService RoiService
@inject PricingConfigService PricingConfig
@inject EnergyDataService EnergyService
@inject IOdsPricingService OdsService
@inject IJSRuntime JS

<PageTitle>ROI Analysis - myenergy</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4"><i class="bi bi-piggy-bank"></i> Investment ROI Analysis</h1>
    <p class="lead">Track payback period and return on investment for solar panels and battery storage</p>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Calculating ROI...</span>
            </div>
            <p class="mt-3">Analyzing investment returns...</p>
        </div>
    }
    else
    {
        <!-- Investment Configuration -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0"><i class="bi bi-sun"></i> Solar Panel Investment</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" @bind="includeSolar" @bind:after="RecalculateRoi" id="includeSolar">
                            <label class="form-check-label" for="includeSolar">
                                <strong>Include Solar Investment</strong>
                            </label>
                        </div>
                        
                        @if (includeSolar)
                        {
                            <div class="mb-3">
                                <label class="form-label">Installation Date</label>
                                <input type="date" class="form-control" @bind="solarInstallDate" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Total Investment (€)</label>
                                <input type="number" class="form-control" step="100" @bind="solarCost" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">System Size (kW)</label>
                                <input type="number" class="form-control" step="0.1" @bind="solarSizeKw" @bind:after="RecalculateRoi" />
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="bi bi-battery-charging"></i> Battery Investment</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" @bind="includeBattery" @bind:after="RecalculateRoi" id="includeBattery">
                            <label class="form-check-label" for="includeBattery">
                                <strong>Include Battery Investment</strong>
                            </label>
                        </div>
                        
                        @if (includeBattery)
                        {
                            <div class="mb-3">
                                <label class="form-label">Installation Date</label>
                                <input type="date" class="form-control" @bind="batteryInstallDate" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Total Investment (€)</label>
                                <input type="number" class="form-control" step="100" @bind="batteryCost" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Battery Capacity (kWh)</label>
                                <select class="form-select" @bind="batteryCapacity" @bind:after="RecalculateRoi">
                                    <option value="5">5 kWh</option>
                                    <option value="10">10 kWh</option>
                                    <option value="15">15 kWh</option>
                                    <option value="20">20 kWh</option>
                                </select>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Analysis Period and Pricing -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-calendar-range"></i> Analysis Parameters</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <label class="form-label">Analysis Start Date</label>
                                <input type="date" class="form-control" @bind="analysisStartDate" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Analysis End Date</label>
                                <input type="date" class="form-control" @bind="analysisEndDate" @bind:after="RecalculateRoi" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Import Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedImportPrice" @bind:after="RecalculateRoi" 
                                       disabled="@useDynamicPricing" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Export Price (€/kWh)</label>
                                <input type="number" class="form-control" step="0.01" @bind="fixedExportPrice" @bind:after="RecalculateRoi" 
                                       disabled="@useDynamicPricing" />
                            </div>
                            <div class="col-md-2">
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" @bind="useDynamicPricing" @bind:after="OnDynamicPricingToggled" id="useDynamic">
                                    <label class="form-check-label" for="useDynamic">
                                        Use Dynamic (ODS)
                                    </label>
                                </div>
                            </div>
                            @if (useDynamicPricing)
                            {
                                <div class="col-md-3">
                                    <label class="form-label">Dynamic Pricing Start Date</label>
                                    <input type="date" class="form-control" @bind="dynamicPricingStartDate" @bind:after="RecalculateRoi" 
                                           min="@odsPricingMinDate" max="@odsPricingMaxDate" />
                                    @if (!string.IsNullOrEmpty(odsPricingDateRange))
                                    {
                                        <small class="text-muted d-block">@odsPricingDateRange</small>
                                    }
                                    @if (odsPricingLastLoadTime.HasValue)
                                    {
                                        <small class="text-muted d-block">Last updated: @odsPricingLastLoadTime.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                    }
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">&nbsp;</label>
                                    <button class="btn btn-outline-primary btn-sm d-block" @onclick="RefreshOdsData" disabled="@isRefreshingOds">
                                        @if (isRefreshingOds)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span> Refreshing...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-arrow-repeat"></i>
                                            <span> Refresh ODS Data</span>
                                        }
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (roiAnalysis != null)
        {
            <!-- Summary Cards -->
            <div class="row mb-4">
                @if (includeSolar)
                {
                    <div class="col-md-4">
                        <div class="card border-warning">
                            <div class="card-body">
                                <h6 class="card-title text-warning"><i class="bi bi-sun"></i> Solar Investment</h6>
                                <h3 class="mb-1">€@roiAnalysis.Solar!.Cost.ToString("N0")</h3>
                                <hr />
                                <p class="mb-1"><strong>Savings to Date:</strong> €@roiAnalysis.SolarSavingsToDate.ToString("N2")</p>
                                <p class="mb-1"><strong>Net Position:</strong> 
                                    <span class="@(roiAnalysis.SolarNetPosition >= 0 ? "text-success" : "text-danger")">
                                        €@roiAnalysis.SolarNetPosition.ToString("N2")
                                    </span>
                                </p>
                                @if (roiAnalysis.SolarBreakEvenDate.HasValue)
                                {
                                    <p class="mb-1"><strong>Break-Even:</strong> @roiAnalysis.SolarBreakEvenDate.Value.ToString("MMM yyyy")</p>
                                    <p class="mb-0"><strong>Payback:</strong> @roiAnalysis.SolarPaybackMonths months</p>
                                }
                                else
                                {
                                    <p class="mb-0 text-muted"><em>Not yet profitable</em></p>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (includeBattery)
                {
                    <div class="col-md-4">
                        <div class="card border-success">
                            <div class="card-body">
                                <h6 class="card-title text-success"><i class="bi bi-battery-charging"></i> Battery Investment</h6>
                                <h3 class="mb-1">€@roiAnalysis.Battery!.Cost.ToString("N0")</h3>
                                <hr />
                                <p class="mb-1"><strong>Savings to Date:</strong> €@roiAnalysis.BatterySavingsToDate.ToString("N2")</p>
                                <p class="mb-1"><strong>Net Position:</strong> 
                                    <span class="@(roiAnalysis.BatteryNetPosition >= 0 ? "text-success" : "text-danger")">
                                        €@roiAnalysis.BatteryNetPosition.ToString("N2")
                                    </span>
                                </p>
                                @if (roiAnalysis.BatteryBreakEvenDate.HasValue)
                                {
                                    <p class="mb-1"><strong>Break-Even:</strong> @roiAnalysis.BatteryBreakEvenDate.Value.ToString("MMM yyyy")</p>
                                    <p class="mb-0"><strong>Payback:</strong> @roiAnalysis.BatteryPaybackMonths months</p>
                                }
                                else
                                {
                                    <p class="mb-0 text-muted"><em>Not yet profitable</em></p>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (includeSolar || includeBattery)
                {
                    <div class="col-md-4">
                        <div class="card border-info">
                            <div class="card-body">
                                <h6 class="card-title text-info"><i class="bi bi-graph-up-arrow"></i> Combined ROI</h6>
                                <h3 class="mb-1">€@roiAnalysis.TotalInvestment.ToString("N0")</h3>
                                <hr />
                                <p class="mb-1"><strong>Total Savings:</strong> €@roiAnalysis.TotalSavings.ToString("N2")</p>
                                <p class="mb-1"><strong>Net Position:</strong> 
                                    <span class="@(roiAnalysis.CombinedNetPosition >= 0 ? "text-success" : "text-danger")">
                                        €@roiAnalysis.CombinedNetPosition.ToString("N2")
                                    </span>
                                </p>
                                @if (roiAnalysis.CombinedBreakEvenDate.HasValue)
                                {
                                    <p class="mb-1"><strong>Break-Even:</strong> @roiAnalysis.CombinedBreakEvenDate.Value.ToString("MMM yyyy")</p>
                                    <p class="mb-0"><strong>Payback:</strong> @roiAnalysis.CombinedPaybackMonths months</p>
                                }
                                else
                                {
                                    <p class="mb-0 text-muted"><em>Not yet profitable</em></p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Cumulative Savings Chart -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="bi bi-graph-up"></i> Cumulative ROI Over Time</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="roiChart" style="max-height: 500px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Monthly Savings Chart -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="bi bi-calendar-month"></i> Monthly Savings Breakdown</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="monthlySavingsChart" style="max-height: 400px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private bool isRefreshingOds = false;
    private bool shouldRenderCharts = false;
    
    // Solar investment
    private bool includeSolar = true;
    private DateTime solarInstallDate = DateTime.Today.AddYears(-2);
    private double solarCost = 8000;
    private double solarSizeKw = 5.0;
    
    // Battery investment
    private bool includeBattery = false;
    private DateTime batteryInstallDate = DateTime.Today.AddMonths(-6);
    private double batteryCost = 5000;
    private double batteryCapacity; // Initialized from config
    
    // Analysis parameters
    private DateTime analysisStartDate = DateTime.Today.AddYears(-2);
    private DateTime analysisEndDate = DateTime.Today;
    private double fixedImportPrice; // Initialized from config
    private double fixedExportPrice; // Initialized from config
    private bool useDynamicPricing = false;
    private DateTime dynamicPricingStartDate = DateTime.Today.AddYears(-2);
    
    // ODS pricing info for UI
    private string odsPricingMinDate = "";
    private string odsPricingMaxDate = "";
    private string odsPricingDateRange = "";
    private DateTime? odsPricingLastLoadTime;
    
    private Models.RoiAnalysis? roiAnalysis;

    protected override async Task OnInitializedAsync()
    {
        // Data already loaded at app startup
        // Initialize defaults from config
        batteryCapacity = PricingConfig.DefaultBatteryCapacityKwh;
        fixedImportPrice = PricingConfig.FixedImportPrice;
        fixedExportPrice = PricingConfig.FixedExportPrice;
        
        // Get ODS pricing date range and last load time
        UpdateOdsPricingInfo();
        
        // Set default dates based on available data
        var availableDates = EnergyService.GetAvailableDates().OrderBy(d => d).ToList();
        if (availableDates.Any())
        {
            analysisStartDate = availableDates.First();
            analysisEndDate = availableDates.Last();
            solarInstallDate = availableDates.First();
            batteryInstallDate = availableDates.First(); // Same as solar install date
        }

        await RecalculateRoi();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts)
        {
            shouldRenderCharts = false;
            Console.WriteLine("OnAfterRenderAsync: About to render ROI charts");
            await Task.Delay(200); // Give DOM time to settle
            await RenderCharts();
        }
    }

    private void UpdateOdsPricingInfo()
    {
        var odsRange = OdsService.GetDataRange();
        odsPricingLastLoadTime = OdsService.LastLoadTime;
        
        if (odsRange.HasValue)
        {
            odsPricingMinDate = odsRange.Value.start.ToString("yyyy-MM-dd");
            odsPricingMaxDate = odsRange.Value.end.ToString("yyyy-MM-dd");
            odsPricingDateRange = $"Available: {odsRange.Value.start:dd/MM/yyyy} - {odsRange.Value.end:dd/MM/yyyy}";
            
            // Set default start date if not set or out of range
            if (dynamicPricingStartDate < odsRange.Value.start || dynamicPricingStartDate > odsRange.Value.end)
            {
                dynamicPricingStartDate = odsRange.Value.start;
            }
        }
    }

    private async Task RefreshOdsData()
    {
        isRefreshingOds = true;
        StateHasChanged();
        
        try
        {
            await OdsService.RefreshFromEliaAsync();
            UpdateOdsPricingInfo();
            
            // Recalculate if using dynamic pricing
            if (useDynamicPricing)
            {
                await RecalculateRoi();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing ODS data: {ex.Message}");
        }
        finally
        {
            isRefreshingOds = false;
            StateHasChanged();
        }
    }

    private async Task OnDynamicPricingToggled()
    {
        // When enabling dynamic pricing, reset the start date to first available
        if (useDynamicPricing)
        {
            var odsRange = OdsService.GetDataRange();
            if (odsRange.HasValue)
            {
                dynamicPricingStartDate = odsRange.Value.start;
            }
        }
        await RecalculateRoi();
    }

    private async Task RecalculateRoi()
    {
        isLoading = true;
        shouldRenderCharts = false; // Reset flag
        StateHasChanged();

        try
        {
            var solar = includeSolar ? new SolarInvestment
            {
                Name = "Solar Panel System",
                InstallationDate = solarInstallDate,
                Cost = solarCost,
                SystemSizeKw = solarSizeKw,
                Description = $"{solarSizeKw} kW solar panel system"
            } : null;

            var battery = includeBattery ? new BatteryInvestment
            {
                Name = "Battery Storage",
                InstallationDate = batteryInstallDate,
                Cost = batteryCost,
                CapacityKwh = batteryCapacity,
                MaxChargeRateKw = batteryCapacity / 2.0,
                Description = $"{batteryCapacity} kWh battery system"
            } : null;

            roiAnalysis = await RoiService.CalculateRoi(
                solar,
                battery,
                analysisStartDate,
                analysisEndDate,
                fixedImportPrice,
                fixedExportPrice,
                useDynamicPricing,
                useDynamicPricing ? dynamicPricingStartDate : null);

            // Flag to render charts after next render
            shouldRenderCharts = true;
            Console.WriteLine("RecalculateRoi: Set shouldRenderCharts = true");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating ROI: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Trigger re-render which will call OnAfterRenderAsync
        }
    }

    private async Task RenderCharts()
    {
        if (roiAnalysis == null || !roiAnalysis.DailyData.Any())
        {
            Console.WriteLine("RenderCharts: No data available");
            return;
        }
        
        Console.WriteLine($"RenderCharts: Processing {roiAnalysis.DailyData.Count} days of data");
        
        // Wait longer for DOM to fully render
        await Task.Delay(250);
        
        // Verify canvas elements exist before rendering
        var roiCanvasExists = await JS.InvokeAsync<bool>("eval", "document.getElementById('roiChart') !== null");
        var savingsCanvasExists = await JS.InvokeAsync<bool>("eval", "document.getElementById('monthlySavingsChart') !== null");
        
        if (!roiCanvasExists || !savingsCanvasExists)
        {
            Console.WriteLine($"Canvas elements not ready: roiChart={roiCanvasExists}, monthlySavingsChart={savingsCanvasExists}");
            // Try again after another delay
            await Task.Delay(500);
        }

        // Prepare data for ROI chart
        var dates = roiAnalysis.DailyData.Select(d => d.Date.ToString("MMM yyyy")).ToArray();
        var solarNet = roiAnalysis.DailyData.Select(d => d.SolarNetPosition).ToArray();
        var batteryNet = roiAnalysis.DailyData.Select(d => d.BatteryNetPosition).ToArray();
        var combinedNet = roiAnalysis.DailyData.Select(d => d.CombinedNetPosition).ToArray();

        Console.WriteLine($"ROI Chart: {dates.Length} data points, includeSolar={includeSolar}, includeBattery={includeBattery}");
        Console.WriteLine($"Sample combined net: [{string.Join(", ", combinedNet.Take(5).Select(v => v.ToString("F2")))}...]");
        
        try
        {
            await JS.InvokeVoidAsync("renderRoiChart", dates, solarNet, batteryNet, combinedNet, 
                includeSolar, includeBattery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering ROI chart: {ex.Message}");
        }

        // Prepare monthly savings data
        var monthlySavings = roiAnalysis.DailyData
            .GroupBy(d => new { d.Date.Year, d.Date.Month })
            .OrderBy(g => g.Key.Year).ThenBy(g => g.Key.Month)
            .Select(g => new {
                Month = new DateTime(g.Key.Year, g.Key.Month, 1).ToString("MMM yyyy"),
                SolarSavings = g.Sum(d => d.SolarDailySavings),
                BatterySavings = g.Sum(d => d.BatteryDailySavings)
            })
            .ToList();

        var monthLabels = monthlySavings.Select(m => m.Month).ToArray();
        var monthlySolar = monthlySavings.Select(m => m.SolarSavings).ToArray();
        var monthlyBattery = monthlySavings.Select(m => m.BatterySavings).ToArray();

        Console.WriteLine($"Monthly Savings Chart: {monthLabels.Length} months");
        Console.WriteLine($"Sample solar savings: [{string.Join(", ", monthlySolar.Take(3).Select(v => v.ToString("F2")))}...]");
        
        try
        {
            await JS.InvokeVoidAsync("renderMonthlySavingsChart", monthLabels, monthlySolar, monthlyBattery,
                includeSolar, includeBattery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering monthly savings chart: {ex.Message}");
        }
    }
}
