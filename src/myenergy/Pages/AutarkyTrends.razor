@page "/autarky-trends"
@using myenergy.Models
@using myenergy.Services
@using Microsoft.JSInterop
@inject EnergyDataService DataService
@inject IJSRuntime JSRuntime

<PageTitle>Energy Independence Trends - SolarViz</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h2>📈 Energy Independence Trends</h2>
            <p class="text-muted">Track your self-consumption and autarky percentages over time</p>
        </div>
    </div>

    @if (_loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading energy independence data...</p>
        </div>
    }
    else
    {
        <!-- Period Selection -->
        <div class="row mb-4">
            <div class="col-md-4">
                <label class="form-label fw-bold">View By:</label>
                <select class="form-select form-select-lg" @bind="SelectedPeriodType" @bind:after="LoadData">
                    <option value="@PeriodType.Daily">Daily</option>
                    <option value="@PeriodType.Weekly">Weekly</option>
                    <option value="@PeriodType.Monthly">Monthly</option>
                    <option value="@PeriodType.Quarterly">Quarterly</option>
                    <option value="@PeriodType.Yearly">Yearly</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Year:</label>
                <select class="form-select form-select-lg" @bind="SelectedYear" @bind:after="LoadData">
                    <option value="">All Years</option>
                    @foreach (var year in _availableYears)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Quick Stats:</label>
                <div class="card bg-light">
                    <div class="card-body py-2">
                        <small class="text-muted">Avg Autarky: <strong class="text-info">@_avgAutarky.ToString("N1")%</strong></small><br/>
                        <small class="text-muted">Avg Self-Consumption: <strong class="text-success">@_avgSelfConsumption.ToString("N1")%</strong></small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Chart -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">📊 Autarky & Self-Consumption Over Time</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="trendsChart" style="max-height: 400px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row g-3 mb-4">
            <div class="col-md-3">
                <div class="card border-info">
                    <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">Best Autarky</h6>
                        <h3 class="text-info mb-0">@_bestAutarky.ToString("N1")%</h3>
                        <small class="text-muted">@_bestAutarkyLabel</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-success">
                    <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">Best Self-Consumption</h6>
                        <h3 class="text-success mb-0">@_bestSelfConsumption.ToString("N1")%</h3>
                        <small class="text-muted">@_bestSelfConsumptionLabel</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-warning">
                    <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">Trend Direction</h6>
                        <h3 class="mb-0">@_trendIcon</h3>
                        <small class="text-muted">@_trendDescription</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-secondary">
                    <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">Data Points</h6>
                        <h3 class="mb-0">@_periodData.Count</h3>
                        <small class="text-muted">@SelectedPeriodType periods</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Data Table -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">📋 Detailed Breakdown</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Period</th>
                                        <th class="text-end">Production</th>
                                        <th class="text-end">Consumption</th>
                                        <th class="text-end">Autarky %</th>
                                        <th class="text-end">Self-Consumption %</th>
                                        <th class="text-center">Independence Level</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var period in _periodData.OrderByDescending(p => p.Date))
                                    {
                                        <tr>
                                            <td><strong>@period.Label</strong></td>
                                            <td class="text-end text-success">@period.Production.ToString("N0") kWh</td>
                                            <td class="text-end text-danger">@period.Consumption.ToString("N0") kWh</td>
                                            <td class="text-end">
                                                <span class="badge @GetAutarkyBadge(period.AutarkyPercent)">
                                                    @period.AutarkyPercent.ToString("N1")%
                                                </span>
                                            </td>
                                            <td class="text-end">
                                                <span class="badge @GetSelfConsumptionBadge(period.SelfConsumptionPercent)">
                                                    @period.SelfConsumptionPercent.ToString("N1")%
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar bg-info" role="progressbar" 
                                                         style="width: @period.AutarkyPercent.ToString("N1")%" 
                                                         aria-valuenow="@period.AutarkyPercent" aria-valuemin="0" aria-valuemax="100">
                                                        @period.AutarkyPercent.ToString("N0")%
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private PeriodType SelectedPeriodType = PeriodType.Monthly;
    private string? SelectedYear;
    private List<int> _availableYears = new();
    private List<PeriodDataPoint> _periodData = new();
    
    private double _avgAutarky;
    private double _avgSelfConsumption;
    private double _bestAutarky;
    private string _bestAutarkyLabel = "";
    private double _bestSelfConsumption;
    private string _bestSelfConsumptionLabel = "";
    private string _trendIcon = "📊";
    private string _trendDescription = "Stable";

    protected override async Task OnInitializedAsync()
    {
        // Data already loaded at app startup
        _availableYears = DataService.GetAvailableYears();
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _periodData.Any())
        {
            await RenderChart();
        }
    }

    private async Task LoadData()
    {
        _loading = true;
        StateHasChanged();

        await Task.Delay(1); // Small delay for UI feedback

        int? year = string.IsNullOrEmpty(SelectedYear) ? null : int.Parse(SelectedYear);
        _periodData = DataService.GetPeriodData(year, SelectedPeriodType);

        if (_periodData.Any())
        {
            _avgAutarky = _periodData.Average(p => p.AutarkyPercent);
            _avgSelfConsumption = _periodData.Average(p => p.SelfConsumptionPercent);

            var bestAutarkyPeriod = _periodData.OrderByDescending(p => p.AutarkyPercent).First();
            _bestAutarky = bestAutarkyPeriod.AutarkyPercent;
            _bestAutarkyLabel = bestAutarkyPeriod.Label;

            var bestSelfConsumptionPeriod = _periodData.OrderByDescending(p => p.SelfConsumptionPercent).First();
            _bestSelfConsumption = bestSelfConsumptionPeriod.SelfConsumptionPercent;
            _bestSelfConsumptionLabel = bestSelfConsumptionPeriod.Label;

            CalculateTrend();
        }

        _loading = false;
        StateHasChanged();
    }

    private void CalculateTrend()
    {
        if (_periodData.Count < 2) return;

        var orderedData = _periodData.OrderBy(p => p.Date).ToList();
        var firstHalf = orderedData.Take(orderedData.Count / 2).Average(p => p.AutarkyPercent);
        var secondHalf = orderedData.Skip(orderedData.Count / 2).Average(p => p.AutarkyPercent);
        var difference = secondHalf - firstHalf;

        if (difference > 5)
        {
            _trendIcon = "📈";
            _trendDescription = "Improving";
        }
        else if (difference < -5)
        {
            _trendIcon = "📉";
            _trendDescription = "Declining";
        }
        else
        {
            _trendIcon = "➡️";
            _trendDescription = "Stable";
        }
    }

    private async Task RenderChart()
    {
        var labels = _periodData.OrderBy(p => p.Date).Select(p => p.Label).ToArray();
        var autarkyData = _periodData.OrderBy(p => p.Date).Select(p => p.AutarkyPercent).ToArray();
        var selfConsumptionData = _periodData.OrderBy(p => p.Date).Select(p => p.SelfConsumptionPercent).ToArray();

        await JSRuntime.InvokeVoidAsync("renderTrendsChart", "trendsChart", labels, autarkyData, selfConsumptionData);
    }

    private string GetAutarkyBadge(double percent)
    {
        return percent switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-info",
            >= 40 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetSelfConsumptionBadge(double percent)
    {
        return percent switch
        {
            >= 70 => "bg-success",
            >= 50 => "bg-info",
            >= 30 => "bg-warning",
            _ => "bg-danger"
        };
    }
}
