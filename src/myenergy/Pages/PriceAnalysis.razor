@page "/price-analysis"
@using myenergy.Models
@using myenergy.Services
@using Microsoft.JSInterop
@inject EnergyDataService DataService
@inject OdsPricingService OdsService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12">
            <h3>üìä Solar Production vs Dynamic Price Analysis</h3>
            <p class="text-muted">
                Analyze the correlation between solar production, grid injection, and ODS dynamic electricity prices.
                <strong>Key insight:</strong> High solar production often leads to lower (or negative) export prices during sunny afternoons.
            </p>
        </div>
    </div>

    @if (!OdsService.IsDataLoaded)
    {
        <div class="alert alert-info">
            <div class="spinner-border spinner-border-sm me-2"></div>
            Loading ODS pricing data...
        </div>
    }
    else
    {
        <!-- Date Selection -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="analysisDate" class="form-label">Select Date:</label>
                <input type="date" 
                       id="analysisDate" 
                       class="form-control" 
                       @bind="SelectedDate" 
                       @bind:after="LoadAnalysisData"
                       min="@MinDate.ToString("yyyy-MM-dd")"
                       max="@MaxDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Analysis Period:</label>
                <select class="form-select" @bind="AnalysisPeriod" @bind:after="LoadPeriodData">
                    <option value="day">Single Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary" @onclick="LoadAnalysisData" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-arrow-clockwise"></i> Refresh Analysis
                </button>
            </div>
        </div>

        @if (AnalysisData.Any())
        {
            <!-- Key Insights Card -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card bg-light">
                        <div class="card-header">
                            <h5>üîç Key Insights</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Correlation Coefficient:</strong><br/>
                                    <span class="@GetCorrelationClass()">
                                        @CorrelationCoefficient.ToString("F3")
                                    </span><br/>
                                    <small class="text-muted">@GetCorrelationDescription()</small>
                                </div>
                                <div class="col-md-2">
                                    <strong>Avg Import Price:</strong><br/>
                                    <span class="text-danger">‚Ç¨@AvgImportPrice.ToString("F4")/kWh</span><br/>
                                    <small class="text-muted">What you pay</small>
                                </div>
                                <div class="col-md-2">
                                    <strong>Avg Export Price:</strong><br/>
                                    <span class="text-success">‚Ç¨@AvgExportPrice.ToString("F4")/kWh</span><br/>
                                    <small class="text-muted">What you get</small>
                                </div>
                                <div class="col-md-2">
                                    <strong>Price Spread:</strong><br/>
                                    <span class="text-warning">‚Ç¨@((AvgImportPrice - AvgExportPrice).ToString("F4"))/kWh</span><br/>
                                    <small class="text-muted">Import - Export</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>Negative Price Hours:</strong><br/>
                                    <span class="text-danger">@NegativePriceHours hours</span><br/>
                                    <small class="text-muted">@NegativePricePercentage.ToString("F1")% of analyzed period</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>Peak Solar Hours:</strong><br/>
                                    <span>Import: ‚Ç¨@PeakProductionImportPrice.ToString("F4")/kWh</span><br/>
                                    <small class="text-muted">Export: ‚Ç¨@PeakProductionExportPrice.ToString("F4")/kWh</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Combined Chart -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">‚ö° Solar Production vs Dynamic Prices</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 400px;">
                                <canvas id="@CorrelationChartId" style="max-height: 400px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Grid Usage Chart (Import/Injection vs Prices) -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h5 class="card-title mb-0">üîå Grid Usage vs Dynamic Prices</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 400px;">
                                <canvas id="@InjectionChartId" style="max-height: 400px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scatter Plot - Production vs Price -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header bg-info text-white">
                            <h5 class="card-title mb-0">üìà Correlation Scatter Plot</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height: 400px;">
                                <canvas id="@ScatterChartId" style="max-height: 400px;"></canvas>
                            </div>
                            <div class="mt-3 alert alert-info">
                                <strong>How to read this chart:</strong> Each point represents a 15-minute interval. 
                                A downward trend indicates that higher solar production correlates with lower export prices.
                                This is the "duck curve" effect where abundant solar supply drives prices down.
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Hourly Analysis Table -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>‚è∞ Hourly Breakdown</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Hour</th>
                                            <th>Avg Production (kWh)</th>
                                            <th>Avg Grid Injection (kWh)</th>
                                            <th>Avg Import Price (‚Ç¨/kWh)</th>
                                            <th>Avg Export Price (‚Ç¨/kWh)</th>
                                            <th>Price Spread</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var hour in HourlyBreakdown.OrderBy(h => h.Hour))
                                        {
                                            <tr class="@(hour.AvgExportPrice < 0 ? "table-danger" : "")">
                                                <td>@hour.Hour:00</td>
                                                <td>@hour.AvgProduction.ToString("F3")</td>
                                                <td>@hour.AvgInjection.ToString("F3")</td>
                                                <td class="text-danger">‚Ç¨@(hour.AvgImportPrice.ToString("F4"))</td>
                                                <td class="@(hour.AvgExportPrice < 0 ? "text-danger fw-bold" : "text-success")">
                                                    ‚Ç¨@(hour.AvgExportPrice.ToString("F4"))
                                                </td>
                                                <td>‚Ç¨@((hour.AvgImportPrice - hour.AvgExportPrice).ToString("F4"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Educational Info -->
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header bg-warning">
                            <h5>üí° Understanding the Correlation</h5>
                        </div>
                        <div class="card-body">
                            <h6>Why do export prices drop when solar production is high?</h6>
                            <p>
                                Belgium experiences a phenomenon called the <strong>"solar duck curve"</strong>. During sunny afternoons:
                            </p>
                            <ol>
                                <li>Thousands of solar panels feed excess electricity into the grid simultaneously</li>
                                <li>Supply exceeds demand, especially during low-consumption periods (summer holidays, weekends)</li>
                                <li>Electricity prices drop, sometimes becoming negative</li>
                                <li>During negative prices, producers must <strong>pay</strong> to inject electricity into the grid</li>
                            </ol>
                            
                            <h6 class="mt-3">How can you benefit?</h6>
                            <ul>
                                <li><strong>Battery storage:</strong> Store cheap/free electricity during high solar production for use during expensive evening hours</li>
                                <li><strong>Smart consumption:</strong> Run appliances (washing machine, dishwasher, EV charging) when prices are lowest</li>
                                <li><strong>Dynamic contracts:</strong> Take advantage of negative prices to get paid for consuming electricity</li>
                                <li><strong>Self-consumption:</strong> Use your solar power directly instead of injecting it when export prices are low</li>
                            </ul>

                            <div class="alert alert-info mt-3">
                                <strong>Did you know?</strong> In 2024, Belgium recorded over 262 hours of negative electricity prices, 
                                primarily during sunny summer afternoons when solar production peaked. This is a record and highlights 
                                the need for more grid flexibility and energy storage solutions.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle"></i> 
                No data available for the selected period. Please choose a different date or period.
            </div>
        }
    }
</div>

@code {
    private DateTime SelectedDate = DateTime.Today.AddDays(-1);
    private DateTime MinDate;
    private DateTime MaxDate;
    private string AnalysisPeriod = "day";
    private bool isLoading = false;

    private string CorrelationChartId = Guid.NewGuid().ToString();
    private string InjectionChartId = Guid.NewGuid().ToString();
    private string ScatterChartId = Guid.NewGuid().ToString();

    private List<AnalysisDataPoint> AnalysisData = new();
    private List<HourlyAnalysis> HourlyBreakdown = new();

    // Calculated metrics
    private double CorrelationCoefficient = 0;
    private double AvgImportPrice = 0;
    private double AvgExportPrice = 0;
    private int NegativePriceHours = 0;
    private double NegativePricePercentage = 0;
    private double PeakProductionImportPrice = 0;
    private double PeakProductionExportPrice = 0;

    protected override async Task OnInitializedAsync()
    {
        await OdsService.LoadDataAsync();
        
        var odsRange = OdsService.GetDataRange();
        if (odsRange.HasValue)
        {
            MinDate = odsRange.Value.start;
            MaxDate = odsRange.Value.end;
            SelectedDate = MaxDate.AddDays(-1);
        }
        else
        {
            MinDate = DateTime.Today.AddMonths(-6);
            MaxDate = DateTime.Today;
        }

        await LoadAnalysisData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && AnalysisData.Any())
        {
            await CreateCharts();
        }
    }

    private async Task LoadAnalysisData()
    {
        isLoading = true;
        try
        {
            AnalysisData.Clear();
            HourlyBreakdown.Clear();

            if (AnalysisPeriod == "day")
            {
                await LoadDayData(SelectedDate);
            }
            else if (AnalysisPeriod == "week")
            {
                for (int i = 0; i < 7; i++)
                {
                    await LoadDayData(SelectedDate.AddDays(-i));
                }
            }
            else if (AnalysisPeriod == "month")
            {
                for (int i = 0; i < 30; i++)
                {
                    await LoadDayData(SelectedDate.AddDays(-i));
                }
            }

            CalculateMetrics();
            await CreateCharts();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPeriodData()
    {
        await LoadAnalysisData();
    }

    private async Task LoadDayData(DateTime date)
    {
        var dayData = DataService.GetDailyDetailData(date);
        if (dayData == null || !dayData.QuarterHours.Any())
            return;

        var odsPricing = OdsService.GetPricingForDay(date);
        if (!odsPricing.Any())
            return;

        foreach (var qh in dayData.QuarterHours)
        {
            var pricing = odsPricing.FirstOrDefault(p => 
                p.DateTime.Hour == qh.Time.Hour && 
                p.DateTime.Minute == qh.Time.Minute);

            if (pricing != null)
            {
                AnalysisData.Add(new AnalysisDataPoint
                {
                    DateTime = qh.Time,
                    Production = qh.ActualProduction,
                    Injection = qh.ActualInjection,
                    ExportPrice = pricing.InjectionPricePerKwh,
                    ImportPrice = pricing.ImportPricePerKwh
                });
            }
        }
    }

    private void CalculateMetrics()
    {
        if (!AnalysisData.Any())
            return;

        // Calculate correlation coefficient (Pearson)
        var productionData = AnalysisData.Where(d => d.Production > 0).ToList();
        if (productionData.Any())
        {
            CorrelationCoefficient = CalculateCorrelation(
                productionData.Select(d => d.Production).ToList(),
                productionData.Select(d => d.ExportPrice).ToList()
            );

            AvgImportPrice = productionData.Average(d => d.ImportPrice);
            AvgExportPrice = productionData.Average(d => d.ExportPrice);
        }

        // Count negative price hours
        NegativePriceHours = AnalysisData.Count(d => d.ExportPrice < 0) / 4; // Convert 15-min intervals to hours
        NegativePricePercentage = (double)AnalysisData.Count(d => d.ExportPrice < 0) / AnalysisData.Count * 100;

        // Peak production impact
        var peakHours = AnalysisData.Where(d => d.DateTime.Hour >= 11 && d.DateTime.Hour <= 15);
        if (peakHours.Any())
        {
            PeakProductionImportPrice = peakHours.Average(d => d.ImportPrice);
            PeakProductionExportPrice = peakHours.Average(d => d.ExportPrice);
        }

        // Hourly breakdown
        HourlyBreakdown = AnalysisData
            .GroupBy(d => d.DateTime.Hour)
            .Select(g => new HourlyAnalysis
            {
                Hour = g.Key,
                AvgProduction = g.Average(d => d.Production),
                AvgInjection = g.Average(d => d.Injection),
                AvgImportPrice = g.Average(d => d.ImportPrice),
                AvgExportPrice = g.Average(d => d.ExportPrice)
            })
            .ToList();
    }

    private double CalculateCorrelation(List<double> x, List<double> y)
    {
        if (x.Count != y.Count || x.Count == 0)
            return 0;

        double avgX = x.Average();
        double avgY = y.Average();

        double numerator = x.Zip(y, (xi, yi) => (xi - avgX) * (yi - avgY)).Sum();
        double denomX = Math.Sqrt(x.Sum(xi => Math.Pow(xi - avgX, 2)));
        double denomY = Math.Sqrt(y.Sum(yi => Math.Pow(yi - avgY, 2)));

        if (denomX == 0 || denomY == 0)
            return 0;

        return numerator / (denomX * denomY);
    }

    private async Task CreateCharts()
    {
        if (!AnalysisData.Any())
            return;

        try
        {
            // Chart 1: Solar Production vs Export Price (Line Chart)
            await JSRuntime.InvokeVoidAsync("createChart", CorrelationChartId, GenerateCorrelationChartConfig());

            // Chart 2: Grid Injection vs Export Price (Line Chart)
            await JSRuntime.InvokeVoidAsync("createChart", InjectionChartId, GenerateInjectionChartConfig());

            // Chart 3: Scatter Plot
            await JSRuntime.InvokeVoidAsync("createChart", ScatterChartId, GenerateScatterChartConfig());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating charts: {ex.Message}");
        }
    }

    private object GenerateCorrelationChartConfig()
    {
        var sortedData = AnalysisData.OrderBy(d => d.DateTime).ToList();
        var labels = sortedData.Select(d => d.DateTime.ToString("dd/MM HH:mm")).ToArray();

        var productionData = new
        {
            label = "Solar Production (kWh/15min)",
            data = sortedData.Select(d => d.Production).ToArray(),
            borderColor = "rgb(255, 193, 7)",
            backgroundColor = "rgba(255, 193, 7, 0.1)",
            borderWidth = 2,
            fill = true,
            tension = 0.4,
            yAxisID = "y"
        };

        var importPriceData = new
        {
            label = "Import Price (‚Ç¨/kWh)",
            data = sortedData.Select(d => d.ImportPrice).ToArray(),
            borderColor = "rgb(220, 53, 69)",
            backgroundColor = "rgba(220, 53, 69, 0.1)",
            borderWidth = 2,
            fill = false,
            tension = 0.4,
            yAxisID = "y1"
        };

        var exportPriceData = new
        {
            label = "Export Price (‚Ç¨/kWh)",
            data = sortedData.Select(d => d.ExportPrice).ToArray(),
            borderColor = "rgb(40, 167, 69)",
            backgroundColor = "rgba(40, 167, 69, 0.1)",
            borderWidth = 2,
            fill = false,
            tension = 0.4,
            yAxisID = "y1"
        };

        return new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new[] { productionData, importPriceData, exportPriceData }
            },
            options = new
            {
                responsive = true,
                maintainAspectRatio = false,
                interaction = new { mode = "index", intersect = false },
                plugins = new
                {
                    title = new { display = true, text = "Solar Production vs Dynamic Prices (Import & Export)" },
                    legend = new { display = true, position = "top" }
                },
                scales = new
                {
                    y = new
                    {
                        type = "linear",
                        display = true,
                        position = "left",
                        title = new { display = true, text = "Production (kWh/15min)" }
                    },
                    y1 = new
                    {
                        type = "linear",
                        display = true,
                        position = "right",
                        title = new { display = true, text = "Price (‚Ç¨/kWh)" },
                        grid = new { drawOnChartArea = false }
                    }
                }
            }
        };
    }

    private object GenerateInjectionChartConfig()
    {
        var sortedData = AnalysisData.OrderBy(d => d.DateTime).ToList();
        var labels = sortedData.Select(d => d.DateTime.ToString("dd/MM HH:mm")).ToArray();

        var injectionData = new
        {
            label = "Grid Injection (kWh/15min)",
            data = sortedData.Select(d => d.Injection).ToArray(),
            borderColor = "rgb(0, 123, 255)",
            backgroundColor = "rgba(0, 123, 255, 0.1)",
            borderWidth = 2,
            fill = true,
            tension = 0.4,
            yAxisID = "y"
        };

        var importPriceData = new
        {
            label = "Import Price (‚Ç¨/kWh)",
            data = sortedData.Select(d => d.ImportPrice).ToArray(),
            borderColor = "rgb(220, 53, 69)",
            backgroundColor = "rgba(220, 53, 69, 0.1)",
            borderWidth = 2,
            fill = false,
            tension = 0.4,
            yAxisID = "y1"
        };

        var exportPriceData = new
        {
            label = "Export Price (‚Ç¨/kWh)",
            data = sortedData.Select(d => d.ExportPrice).ToArray(),
            borderColor = "rgb(40, 167, 69)",
            backgroundColor = "rgba(40, 167, 69, 0.1)",
            borderWidth = 2,
            fill = false,
            tension = 0.4,
            yAxisID = "y1"
        };

        return new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new[] { injectionData, importPriceData, exportPriceData }
            },
            options = new
            {
                responsive = true,
                maintainAspectRatio = false,
                interaction = new { mode = "index", intersect = false },
                plugins = new
                {
                    title = new { display = true, text = "Grid Usage vs Dynamic Prices (Import & Export)" },
                    legend = new { display = true, position = "top" }
                },
                scales = new
                {
                    y = new
                    {
                        type = "linear",
                        display = true,
                        position = "left",
                        title = new { display = true, text = "Injection (kWh/15min)" }
                    },
                    y1 = new
                    {
                        type = "linear",
                        display = true,
                        position = "right",
                        title = new { display = true, text = "Price (‚Ç¨/kWh)" },
                        grid = new { drawOnChartArea = false }
                    }
                }
            }
        };
    }

    private object GenerateScatterChartConfig()
    {
        var scatterPoints = AnalysisData
            .Where(d => d.Production > 0)
            .Select(d => new { x = d.Production, y = d.ExportPrice })
            .ToArray();

        return new
        {
            type = "scatter",
            data = new
            {
                datasets = new[]
                {
                    new
                    {
                        label = "Production vs Export Price",
                        data = scatterPoints,
                        backgroundColor = "rgba(54, 162, 235, 0.6)",
                        borderColor = "rgb(54, 162, 235)",
                        borderWidth = 1
                    }
                }
            },
            options = new
            {
                responsive = true,
                maintainAspectRatio = false,
                plugins = new
                {
                    title = new { display = true, text = $"Correlation: {CorrelationCoefficient:F3}" },
                    legend = new { display = true, position = "top" }
                },
                scales = new
                {
                    x = new
                    {
                        title = new { display = true, text = "Solar Production (kWh/15min)" }
                    },
                    y = new
                    {
                        title = new { display = true, text = "Export Price (‚Ç¨/kWh)" }
                    }
                }
            }
        };
    }

    private string GetCorrelationClass()
    {
        var abs = Math.Abs(CorrelationCoefficient);
        if (abs > 0.7) return "text-success fw-bold fs-4";
        if (abs > 0.4) return "text-warning fw-bold fs-4";
        return "text-muted fs-4";
    }

    private string GetCorrelationDescription()
    {
        var abs = Math.Abs(CorrelationCoefficient);
        var direction = CorrelationCoefficient < 0 ? "Negative" : "Positive";
        
        if (abs > 0.7) return $"{direction} - Strong correlation";
        if (abs > 0.4) return $"{direction} - Moderate correlation";
        return $"{direction} - Weak correlation";
    }

    private string GetPriceTrendIcon(double price)
    {
        if (price < 0) return "‚ö†Ô∏è Negative (paying to inject)";
        if (price < 0.05) return "üìâ Very low";
        if (price < 0.10) return "‚ÜòÔ∏è Low";
        return "‚Üí Normal";
    }

    // Data Models
    private class AnalysisDataPoint
    {
        public DateTime DateTime { get; set; }
        public double Production { get; set; }
        public double Injection { get; set; }
        public double ExportPrice { get; set; }
        public double ImportPrice { get; set; }
    }

    private class HourlyAnalysis
    {
        public int Hour { get; set; }
        public double AvgProduction { get; set; }
        public double AvgInjection { get; set; }
        public double AvgImportPrice { get; set; }
        public double AvgExportPrice { get; set; }
    }
}
