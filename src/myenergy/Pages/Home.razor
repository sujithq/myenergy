@page "/"

@inject HttpClient Http

@using System.Globalization
@using System.Text.Json
@using NodaTime
@using NodaTime.Calendars

<Tabs EnableFadeEffect="true"
      OnShown="@(args => OnTabShownAsync(args))">
    <Tab Title="Day" IsActive="true">
        <Content>
            <p class="mt-3">
                <Totals Data="@totals" Key="Day" />
                <DateInput Value="currentDate" ValueExpression="() => currentDate" TValue="DateOnly" EnableMinMax="true" Min="@minDate" Max="@maxDate" Placeholder="Enter Date" ValueChanged="(value) => DayChangedAsync(value)" />
                <BarChart @ref="barChartDay" Class="mb-4" />
            </p>
        </Content>
    </Tab>
    <Tab Title="Week">
        <Content>
            <p class="mt-3">
                <label>Year</label>
                <select class="select-element" @bind="selectedYearIndex" @bind:after="YearChangedAsync">
                    @foreach (var year in years.Select((Year, Id) => (Year, Id)))
                    {
                        if (year.Id == selectedYearIndex)
                        {
                            <option value="@year.Id" selected>@year.Year</option>
                        }
                        else
                        {
                            <option value="@year.Id">@year.Year</option>
                        }
                    }
                </select>
                <Totals Data="@totals" Key="Week" />
                <input type="range" min="0" max="51" class="slider" @bind="selectedWeekIndex" @bind:after="WeekChangedAsync">
                <BarChart @ref="barChartWeek" Class="mb-4" />
            </p>
        </Content>
    </Tab>

    <Tab Title="Month">
        <Content>
            <p class="mt-3">
                <label>Year</label>
                <select class="select-element" @bind="selectedYearIndex" @bind:after="YearChangedAsync">
                    @foreach (var year in years.Select((Year, Id) => (Year, Id)))
                    {
                        if (year.Id == selectedYearIndex)
                        {
                            <option value="@year.Id" selected>@year.Year</option>
                        }
                        else
                        {
                            <option value="@year.Id">@year.Year</option>
                        }
                    }
                </select>
                <label>Month</label>
                <select class="select-element" @bind="selectedMonthIndex" @bind:after="MonthChangedAsync">
                    @foreach (var month in months.Select((Year, Id) => (Year, Id)))
                    {
                        if (month.Id == selectedMonthIndex)
                        {
                            <option value="@month.Id" selected>@month.Year</option>
                        }
                        else
                        {
                            <option value="@month.Id">@month.Year</option>
                        }
                    }
                </select>
                <Totals Data="@totals" Key="Month" />
                <BarChart @ref="barChartMonth" Class="mb-4" />
            </p>
        </Content>
    </Tab>
    <Tab Title="Year">
        <Content>
            <p class="mt-3">
                <label>Year</label>
                <select class="select-element" @bind="selectedYearIndex" @bind:after="YearChangedAsync">
                    @foreach (var year in years.Select((Year, Id) => (Year, Id)))
                    {
                        if (year.Id == selectedYearIndex)
                        {
                            <option value="@year.Id" selected>@year.Year</option>
                        }
                        else
                        {
                            <option value="@year.Id">@year.Year</option>
                        }
                    }
                </select>
                <Totals Data="@totals" Key="Year" />
                <BarChart @ref="barChartYear" Class="mb-4" />
            </p>
        </Content>
    </Tab>
    <Tab Title="All">
        <Content>
            <p class="mt-3">
                <Totals Data="@totals" Key="All" />
                <BarChart @ref="barChartAll" Class="mb-4" />
            </p>
        </Content>
    </Tab>

</Tabs>

@code {

    record BarChartData(int DayNumber, string DayMonth, double Production, double Usage, double Injection, bool JuneProcessed, bool SungrowProcessed);
    public record TotalData(int TotalProduction, int TotalNetInjection, int TotalNetUsage, int TotalUsage);

    static List<int> years = new List<int> { 2023, 2024 };
    static List<int> weeks = Enumerable.Range(1, 52).ToList();
    static List<int> months = Enumerable.Range(1, 12).ToList();

    static Dictionary<string, TotalData> totals = new Dictionary<string, TotalData>(){
        { "Day", new TotalData(0, 0, 0, 0) },
        { "Week", new TotalData(0, 0, 0, 0) },
        { "Month", new TotalData(0, 0, 0, 0) },
        { "Year", new TotalData(0, 0, 0, 0) }
    };

    BarChart? barChartYear;
    BarChart? barChartMonth;
    BarChart? barChartWeek;
    BarChart? barChartDay;
    BarChart? barChartAll;

    DateOnly minDate = DateOnly.FromDateTime(new DateTime(years.First(), 1, 1));
    DateOnly maxDate = DateOnly.FromDateTime(new DateTime(years.Last(), 12, 31));
    DateOnly currentDate; // = belgiumTime.ToDateOnly();

    private Dictionary<int, List<BarChartData>> dataDaily = new();

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!dataDaily.Any())
        {
            dataDaily = await Http.GetFromJsonAsync<Dictionary<int, List<BarChartData>>>($"https://github.com/sujithq/myenergy/blob/main/src/myenergy/wwwroot/Data/data.json?v{DateTime.UtcNow.Ticks}");
        }

        if (first)
        {
            await RenderSolarPanelsAllAsync(first);
            await RenderSolarPanelsYearAsync(selectedYearIndex, first);
            await RenderSolarPanelsWeekAsync(selectedYearIndex, selectedWeekIndex, first);
            await RenderSolarPanelsMonthAsync(selectedYearIndex, selectedMonthIndex, first);
            await RenderSolarPanelsDayAsync(selectedYearIndex, DateTime.Now.DayOfYear, first);
        }

        await base.OnAfterRenderAsync(first);

    }

    private async Task SolarPanelsAsync(List<string> labels, List<double> production, List<double> usage, List<double> injection, string title, bool init, BarChart barChart, string xTitle = "Months")
    {
        var data = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>()
                {
                    new BarChartDataset()
                    {
                        Label = "Production",
                        Data = production,
                        BackgroundColor = new List<string>{ "rgb(0,0,0)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Net Injection",
                        Data = injection,
                        BackgroundColor = new List<string> { "rgb(243,167,18)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Net Usage",
                        Data = usage,
                        BackgroundColor = new List<string> { "rgb(231,105,149)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Total Usage",
                        Data = production.Zip(injection, (first, second) => new { first, second })
                          .Zip(usage, (previous, last) => previous.first + last - previous.second)
                          .ToList(),
                        BackgroundColor = new List<string> { "rgb(170,240,104)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    }
                }
            };


        options.Plugins!.Title!.Text = title;
        options.Scales.X!.Title!.Text = xTitle;

        if (init)
        {
            options.Interaction.Mode = InteractionMode.Index;
            options.Plugins.Title.Display = true;
            options.Plugins.Title.Font!.Size = 20;

            options.Responsive = true;

            options.Scales.X.Title.Display = true;

            options.Scales.Y!.Title!.Text = "kWh";
            options.Scales.Y.Title.Display = true;

            await barChart.InitializeAsync(data, options);
        }

        else
            await barChart.UpdateAsync(data, options);
    }
    private async Task RenderSolarPanelsAllAsync(bool init)
    {
        if (!dataDaily.Any())
            return;

        await SolarPanelsAsync(
            dataDaily.Keys.Select(s=>s.ToString()).ToList(),
            dataDaily.Select(s => s.Value.Sum(ss => ss.Production)).ToList(),
            dataDaily.Select(s => s.Value.Sum(ss => ss.Usage)).ToList(),
            dataDaily.Select(s => s.Value.Sum(ss => ss.Injection) / 1000).ToList(),
            $"Solar Panels", init, barChartAll!, "Year"
        );

        totals["All"] = new TotalData((int)dataDaily.SelectMany(sm => sm.Value.Select(s => s.Production)).Sum(),
                                        (int)dataDaily.SelectMany(sm => sm.Value.Select(s => s.Injection)).Sum() / 1000,
                                        (int)dataDaily.SelectMany(sm => sm.Value.Select(s => s.Usage)).Sum(), (int)(dataDaily.SelectMany(sm => sm.Value.Select(s => s.Production)).Sum() + dataDaily.SelectMany(sm => sm.Value.Select(s => s.Usage)).Sum() - dataDaily.SelectMany(sm => sm.Value.Select(s => s.Injection)).Sum() / 1000));

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RenderSolarPanelsYearAsync(int yearIndex, bool init)
    {
        if (!dataDaily.Any())
            return;

        var selectedYear = years[yearIndex];

        var data = dataDaily[selectedYear]
            .GroupBy(data => data.DayMonth.Split('/')[1]) // Extracting the month part
            .ToList();

        await SolarPanelsAsync(
            data.Select(s => s.Key).ToList(),
            data.Select(s => s.Sum(ss => ss.Production)).ToList(),
            data.Select(s => s.Sum(ss => ss.Usage)).ToList(),
            data.Select(s => s.Sum(ss => ss.Injection) / 1000).ToList(),
            $"Solar Panels ({selectedYear})", init, barChartYear!, "Month"
        );

        totals["Year"] = new TotalData((int)data.SelectMany(sm => sm.Select(s => s.Production)).Sum(),
                                        (int)data.SelectMany(sm => sm.Select(s => s.Injection)).Sum() / 1000,
                                        (int)data.SelectMany(sm => sm.Select(s => s.Usage)).Sum(), (int)(data.SelectMany(sm => sm.Select(s => s.Production)).Sum() + data.SelectMany(sm => sm.Select(s => s.Usage)).Sum() - data.SelectMany(sm => sm.Select(s => s.Injection)).Sum() / 1000));

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RenderSolarPanelsMonthAsync(int yearIndex, int monthIndex, bool init)
    {
        if (!dataDaily.Any())
            return;

        var selectedYear = years[yearIndex];
        var selectedMonth = months[monthIndex];

        var data = dataDaily[selectedYear].Where(a => int.Parse(a.DayMonth.Split('/').Last()) == selectedMonth).ToList();

        await SolarPanelsAsync(
            data.Select(s => s.DayMonth).ToList(),
            data.Select(s => s.Production).ToList(),
            data.Select(s => s.Usage).ToList(),
            data.Select(s => s.Injection / 1000).ToList(),
            $"Solar Panels ({selectedMonth}/{selectedYear})", init, barChartMonth!, "Day"
        );

        totals["Month"] = new TotalData((int)data.Select(s => s.Production).Sum(),
                                        (int)data.Select(s => s.Injection).Sum() / 1000,
                                        (int)data.Select(s => s.Usage).Sum(), (int)(data.Select(s => s.Production).Sum() + data.Select(s => s.Usage).Sum() - data.Select(s => s.Injection).Sum() / 1000));

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RenderSolarPanelsWeekAsync(int yearIndex, int weekIndex, bool init)
    {
        if (!dataDaily.Any())
            return;

        var selectedYear = years[yearIndex];
        var selectedWeek = weeks[weekIndex];

        var data = dataDaily[selectedYear].Where(a => GetWeekOfYear(a.DayNumber, selectedYear) == selectedWeek).ToList();

        await SolarPanelsAsync(
            data.Select(s => s.DayMonth).ToList(),
            data.Select(s => s.Production).ToList(),
            data.Select(s => s.Usage).ToList(),
            data.Select(s => s.Injection / 1000).ToList(),
            $"Solar Panels ({selectedYear}/{selectedWeek})", init, barChartWeek!, "Day"
        );

        totals["Week"] = new TotalData((int)data.Select(s => s.Production).Sum(),
                                        (int)data.Select(s => s.Injection).Sum() / 1000,
                                        (int)data.Select(s => s.Usage).Sum(), (int)(data.Select(s => s.Production).Sum() + data.Select(s => s.Usage).Sum() - data.Select(s => s.Injection).Sum() / 1000));

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RenderSolarPanelsDayAsync(int yearIndex, int day, bool init)
    {
        if (!dataDaily.Any())
            return;

        var selectedYear = years[yearIndex];

        var data = dataDaily[selectedYear].Where(a => a.DayNumber == day).ToList();

        await SolarPanelsAsync(
            data.Select(s => s.DayMonth).ToList(),
            data.Select(s => s.Production).ToList(),
            data.Select(s => s.Usage).ToList(),
            data.Select(s => s.Injection / 1000).ToList(),
            $"Solar Panels ({DateOnly.FromDateTime(new DateTime(selectedYear, 1, 1).AddDays(day - 1)).ToString("yyyy/MM/dd")})", init, barChartDay!, "Day"
        );

        totals["Day"] = new TotalData((int)data.Select(s => s.Production).Sum(),
                                        (int)data.Select(s => s.Injection).Sum() / 1000,
                                        (int)data.Select(s => s.Usage).Sum(), (int)(data.Select(s => s.Production).Sum() + data.Select(s => s.Usage).Sum() - data.Select(s => s.Injection).Sum() / 1000));

        await InvokeAsync(() => StateHasChanged());
    }

    static CultureInfo ci = new CultureInfo("nl-BE");



    int selectedYearIndex; // = years.FindIndex(0, 1, f => f == belgiumTime.Year);
    int selectedMonthIndex; // = belgiumTime.Month - 1;
    int selectedWeekIndex; // = WeekYearRules.Iso.GetWeekOfWeekYear(belgiumTime); // ci.Calendar.GetWeekOfYear(belgiumTime, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek) - 1;
    int selectedDayOfYear; // = belgiumTime.DayOfYear;

    private static void GetBelgiumTime()
    {
        Instant now = SystemClock.Instance.GetCurrentInstant();
        DateTimeZone zone = DateTimeZoneProviders.Tzdb["Europe/Brussels"];
        belgiumTime = now.InZone(zone).Date;
    }

    private static LocalDate belgiumTime;

    protected override void OnInitialized()
    {
        GetBelgiumTime();

        selectedYearIndex = belgiumTime.Year - years.First(); // years.FindIndex(0, 1, f => f == belgiumTime.Year);
        selectedMonthIndex = belgiumTime.Month - 1;
        selectedWeekIndex = WeekYearRules.Iso.GetWeekOfWeekYear(belgiumTime) - 1; // ci.Calendar.GetWeekOfYear(belgiumTime, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek) - 1;
        selectedDayOfYear = belgiumTime.DayOfYear;
        currentDate = belgiumTime.ToDateOnly();

        base.OnInitialized();


    }

    static int GetWeekOfYear(int dayOfYear, int year)
    {
        // Create a date for the specified day of the specified year
        DateTime date = new DateTime(year, 1, 1).AddDays(dayOfYear - 1);


        // Get the Calendar instance associated with a CultureInfo
        Calendar calendar = ci.Calendar;

        // Specify the rules for the week of the year
        CalendarWeekRule weekRule = ci.DateTimeFormat.CalendarWeekRule;
        DayOfWeek firstDayOfWeek = ci.DateTimeFormat.FirstDayOfWeek;

        // Get the week of the year
        int weekOfYear = calendar.GetWeekOfYear(date, weekRule, firstDayOfWeek);

        // Check if the week number belongs to the previous year
        if (date.Month == 1 && weekOfYear > 50)
        {
            return 1;
        }

        return weekOfYear;
    }

    BarChartOptions options = new BarChartOptions();
    BarChartOptions optionsWeek = new BarChartOptions();

    private async Task OnTabShownAsync(TabsEventArgs args)
    {
        switch (args.ActiveTabTitle)
        {
            case "Day":
                await RenderSolarPanelsDayAsync(selectedYearIndex, selectedDayOfYear, false);
                break;
            case "Week":
                await RenderSolarPanelsWeekAsync(selectedYearIndex, selectedWeekIndex, false);
                break;
            case "Month":
                await RenderSolarPanelsMonthAsync(selectedYearIndex, selectedMonthIndex, false);
                break;
            case "Year":
                await RenderSolarPanelsYearAsync(selectedYearIndex, false);
                break;
        }
    }
    private async Task YearChangedAsync()
    {
        await RenderSolarPanelsYearAsync(selectedYearIndex, false);
    }

    private async Task MonthChangedAsync()
    {
        await RenderSolarPanelsMonthAsync(selectedYearIndex, selectedMonthIndex, false);
    }

    private async Task DayChangedAsync(DateOnly dateOnly)
    {
        selectedYearIndex = dateOnly.Year - years.First();
        selectedDayOfYear = dateOnly.DayOfYear;
        await RenderSolarPanelsDayAsync(selectedYearIndex, selectedDayOfYear, false);
    }

    private async Task WeekChangedAsync()
    {
        await RenderSolarPanelsWeekAsync(selectedYearIndex, selectedWeekIndex, false);
    }
}
