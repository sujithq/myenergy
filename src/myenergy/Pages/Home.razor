@page "/"
@using System.Globalization

<label>Year</label>
<select class="select-element" @bind="selectedYearIndex" @bind:after="YearChangedAsync">
    @foreach (var year in years.Select((Year, Id) => (Year, Id)))
    {
        if (year.Id == selectedYearIndex)
        {
            <option value="@year.Id" selected>@year.Year</option>
        }
        else
        {
            <option value="@year.Id">@year.Year</option>
        }
    }
</select>

<table class="table">
    <thead>
        <tr>
            <th>Total Production: @totalP</th>
            <th>Total Net Injection: @totalNi</th>
            <th>Total Net Usage: @totalNu</th>
            <th>Total Usage: @totalU</th>
        </tr>
    </thead>
</table>







<BarChart @ref="barChartMonth" Class="mb-4" />
<br>

<label>Week</label>
<input type="range" min="0" max="51" class="slider" @bind="selectedWeekIndex" @bind:after="WeekChangedAsync">

<BarChart @ref="barChartWeek" Class="mb-4" />

@code {
    private static List<int> years = new List<int> { 2023, 2024 };
    private static List<int> weeks = Enumerable.Range(1, 52).ToList();

    private BarChart? barChartMonth;
    private BarChart? barChartWeek;

    private static Dictionary<int, (List<double> production, List<double> usage, List<double> injection)> dataMonthly = new Dictionary<int, (List<double> production, List<double> usage, List<double> injection)>{
        {
            2023, (
                new List<double> { 0, 0, 0, 0, 384.2, 1157.1, 905.7, 849.1, 793.2, 464.9, 204.9, 78.1 }
                , new List<double> { 620.637, 429.25, 509.59, 733.684, 427.764, 108.757, 135.597, 147.666, 186.336, 497.902, 632.022, 421.632 }
                , new List<double> { 0, 0, 0, 0, 294.226, 864.399, 719.251, 663.007, 612.489, 305.215, 130.78, 25.625 }
            )
        },{
            2024, (
                new List<double> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                , new List<double> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                , new List<double> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
            )
        }
     };

    private static Dictionary<int, List<(int DayNumber, string DayMonth, double Production, double Usage, double Injection)>> dataDaily = new Dictionary<int, List<(int DayNumber, string DayMonth, double Production, double Usage, double Injection)>>()
    {
        { 2023, new List<(int DayNumber, string DayMonth, double Production, double Usage, double Injection)>{
            (1,"1/1",0,0,0),
(2,"2/1",0,0,0),
(3,"3/1",0,0,0),
(4,"4/1",0,0,0),
(5,"5/1",0,6.87,0),
(6,"6/1",0,9.998,0),
(7,"7/1",0,20.016,0),
(8,"8/1",0,14.608,0),
(9,"9/1",0,10.938,0),
(10,"10/1",0,69.895,0),
(11,"11/1",0,11.255,0),
(12,"12/1",0,9.939,0),
(13,"13/1",0,12.532,0),
(14,"14/1",0,13.86,0),
(15,"15/1",0,10.767,0),
(16,"16/1",0,22.78,0),
(17,"17/1",0,47.941,0),
(18,"18/1",0,13.98,0),
(19,"19/1",0,7.487,0),
(20,"20/1",0,12.249,0),
(21,"21/1",0,29.977,0),
(22,"22/1",0,45.17,0),
(23,"23/1",0,7.069,0),
(24,"24/1",0,30.664,0),
(25,"25/1",0,41.37,0),
(26,"26/1",0,39.782,0),
(27,"27/1",0,32.994,0),
(28,"28/1",0,22.226,0),
(29,"29/1",0,60.418,0),
(30,"30/1",0,9.538,0),
(31,"31/1",0,6.314,0),
(32,"1/2",0,18.097,0),
(33,"2/2",0,7.969,0),
(34,"3/2",0,13.345,0),
(35,"4/2",0,42.388,0),
(36,"5/2",0,10.547,0),
(37,"6/2",0,7.863,0),
(38,"7/2",0,7.342,0),
(39,"8/2",0,16.085,0),
(40,"9/2",0,34.591,0),
(41,"10/2",0,33.334,0),
(42,"11/2",0,12.761,0),
(43,"12/2",0,13.507,0),
(44,"13/2",0,10.801,0),
(45,"14/2",0,6.602,0),
(46,"15/2",0,13.323,0),
(47,"16/2",0,6.437,0),
(48,"17/2",0,31.575,0),
(49,"18/2",0,3.465,0),
(50,"19/2",0,8.716,0),
(51,"20/2",0,6.714,0),
(52,"21/2",0,13.574,0),
(53,"22/2",0,5.735,0),
(54,"23/2",0,6.307,0),
(55,"24/2",0,5.228,0),
(56,"25/2",0,20.749,0),
(57,"26/2",0,29.068,0),
(58,"27/2",0,36.248,0),
(59,"28/2",0,6.879,0),
(60,"1/3",0,11.508,0),
(61,"2/3",0,50.153,0),
(62,"3/3",0,10.233,0),
(63,"4/3",0,11.47,0),
(64,"5/3",0,5.947,0),
(65,"6/3",0,7.865,0),
(66,"7/3",0,6.177,0),
(67,"8/3",0,69.574,0),
(68,"9/3",0,6.973,0),
(69,"10/3",0,8.943,0),
(70,"11/3",0,6.637,0),
(71,"12/3",0,15.213,0),
(72,"13/3",0,9.226,0),
(73,"14/3",0,9.632,0),
(74,"15/3",0,5.717,0),
(75,"16/3",0,12.935,0),
(76,"17/3",0,7.622,0),
(77,"18/3",0,6.454,0),
(78,"19/3",0,65.349,0),
(79,"20/3",0,8.089,0),
(80,"21/3",0,8.071,0),
(81,"22/3",0,14.577,0),
(82,"23/3",0,7.545,0),
(83,"24/3",0,9.454,0),
(84,"25/3",0,48.263,0),
(85,"26/3",0,7.681,0),
(86,"27/3",0,6.504,0),
(87,"28/3",0,41.141,0),
(88,"29/3",0,15.936,0),
(89,"30/3",0,6.005,0),
(90,"31/3",0,8.696,0),
(91,"1/4",0,12.402,0),
(92,"2/4",0,34.812,0),
(93,"3/4",0,54.016,0),
(94,"4/4",0,9.408,0),
(95,"5/4",0,24.984,0),
(96,"6/4",0,10.452,0),
(97,"7/4",0,12.56,0),
(98,"8/4",0,39.401,0),
(99,"9/4",0,25.341,0),
(100,"10/4",0,14.426,0),
(101,"11/4",0,7.405,0),
(102,"12/4",0,17.086,0),
(103,"13/4",0,18.985,0),
(104,"14/4",0,36.306,0),
(105,"15/4",0,12.882,0),
(106,"16/4",0,15.802,0),
(107,"17/4",0,37.461,0),
(108,"18/4",0,38.784,0),
(109,"19/4",0,6.32,0),
(110,"20/4",0,40.808,0),
(111,"21/4",0,5.993,0),
(112,"22/4",0,16.99,0),
(113,"23/4",0,49.474,0),
(114,"24/4",0,36.22,0),
(115,"25/4",0,35.124,0),
(116,"26/4",0,21.166,0),
(117,"27/4",0,13.479,0),
(118,"28/4",0,45.437,0),
(119,"29/4",0,8.168,0),
(120,"30/4",0,31.992,0),
(121,"1/5",0,27.588,0),
(122,"2/5",0,13.433,0),
(123,"3/5",0,31.854,0),
(124,"4/5",0,5.375,0),
(125,"5/5",0,8.925,0),
(126,"6/5",0,8.29,0),
(127,"7/5",0,22.752,0),
(128,"8/5",0,24.286,0),
(129,"9/5",0,7.779,0),
(130,"10/5",0,18.27,0),
(131,"11/5",0,9.708,0),
(132,"12/5",0,12.866,0),
(133,"13/5",0,8.854,0),
(134,"14/5",0,44.088,0),
(135,"15/5",0,21.344,0),
(136,"16/5",0,19.707,0),
(137,"17/5",0,41.698,0),
(138,"18/5",0,18.182,0),
(139,"19/5",0,25.287,0),
(140,"20/5",0,10.368,0),
(141,"21/5",0,8.843,0),
(142,"22/5",5,5.524,3202),
(143,"23/5",32.6,8.306,13364),
(144,"24/5",29.3,3.858,21074),
(145,"25/5",38.1,2.079,32596),
(146,"26/5",47.5,2.2,40752),
(147,"27/5",47.3,3.918,32009),
(148,"28/5",45.7,1.973,42046),
(149,"29/5",44.6,5.057,26758),
(150,"30/5",47.5,2.112,43834),
(151,"31/5",46.6,3.24,38591),
(152,"1/6",47,2.031,43479),
(153,"2/6",41,3.357,17279),
(154,"3/6",47.7,2.398,36335),
(155,"4/6",46.9,1.593,41362),
(156,"5/6",45.7,2.25,21597),
(157,"6/6",44.8,2.412,40390),
(158,"7/6",32.6,5.423,21417),
(159,"8/6",45.4,2.561,23080),
(160,"9/6",44.5,2.672,39559),
(161,"10/6",45.5,2.46,34797),
(162,"11/6",43,3.963,32550),
(163,"12/6",45.4,4.781,38149),
(164,"13/6",46.1,3.193,33807),
(165,"14/6",46.9,3.646,36297),
(166,"15/6",41.2,6.228,33249),
(167,"16/6",39.6,6.295,26417),
(168,"17/6",35.7,5.764,19712),
(169,"18/6",18.9,3.58,14076),
(170,"19/6",39.6,3.355,33106),
(171,"20/6",28.8,3.016,25095),
(172,"21/6",41.7,3.624,31566),
(173,"22/6",7.3,4.578,2987),
(174,"23/6",43.2,3.393,31927),
(175,"24/6",47.9,4.121,28261),
(176,"25/6",47,2.384,42371),
(177,"26/6",34.5,2.872,30166),
(178,"27/6",31.9,4.503,26599),
(179,"28/6",20.8,6.96,13230),
(180,"29/6",19.1,2.653,14956),
(181,"30/6",37.4,2.691,30583),
(182,"1/7",15.6,5.106,10057),
(183,"2/7",35.9,2.468,27275),
(184,"3/7",33.7,4.611,28169),
(185,"4/7",30.2,3.675,24956),
(186,"5/7",28.8,3.86,21708),
(187,"6/7",32.1,3.398,26392),
(188,"7/7",43.2,9.209,32586),
(189,"8/7",38.8,7.274,25186),
(190,"9/7",26.4,7.109,14678),
(191,"10/7",37.1,6.021,25204),
(192,"11/7",38.1,4.145,30504),
(193,"12/7",34.7,4.764,26898),
(194,"13/7",28.7,4.54,22594),
(195,"14/7",33,2.999,30435),
(196,"15/7",25.1,1.6,22628),
(197,"16/7",26,1.429,23514),
(198,"17/7",35.6,1.293,33047),
(199,"18/7",41.5,1.571,39075),
(200,"19/7",28.1,1.398,25694),
(201,"20/7",25.5,1.246,22977),
(202,"21/7",32,3.132,25699),
(203,"22/7",27.9,6.136,20673),
(204,"23/7",15.4,6.692,9587),
(205,"24/7",23.6,4.933,17373),
(206,"25/7",35.8,3.322,30594),
(207,"26/7",33.5,2.926,26541),
(208,"27/7",10.1,12.055,4656),
(209,"28/7",27,3.44,21657),
(210,"29/7",28.7,2.242,23574),
(211,"30/7",23.9,4.371,19096),
(212,"31/7",9.7,8.632,6224),
(213,"1/8",22.8,3.115,18504),
(214,"2/8",26.3,4.629,20371),
(215,"3/8",16.1,2.732,12752),
(216,"4/8",29.9,4.144,21799),
(217,"5/8",14,6.399,9741),
(218,"6/8",13.8,2.729,10017),
(219,"7/8",31.7,2.781,25931),
(220,"8/8",22.4,3.865,17978),
(221,"9/8",39.9,4.159,28811),
(222,"10/8",43.8,4.205,37672),
(223,"11/8",31.8,4.085,27604),
(224,"12/8",27.9,7.729,23587),
(225,"13/8",27.2,5.8,18099),
(226,"14/8",42.9,3.902,34708),
(227,"15/8",31.9,3.35,26876),
(228,"16/8",22.9,4.656,17920),
(229,"17/8",15,9.801,6335),
(230,"18/8",28.7,3.732,24477),
(231,"19/8",23.5,4.779,19890),
(232,"20/8",40.1,4.921,30107),
(233,"21/8",42.1,3.794,35849),
(234,"22/8",33,4.497,27557),
(235,"23/8",41.1,4.363,32820),
(236,"24/8",13.9,5.347,8694),
(237,"25/8",11.7,4.933,7971),
(238,"26/8",30,4.646,24476),
(239,"27/8",29.3,7.497,20039),
(240,"28/8",25.7,3.939,21072),
(241,"29/8",21.8,5.911,16277),
(242,"30/8",21.3,6.149,13474),
(243,"31/8",26.6,5.077,21599),
(244,"1/9",20.5,4.358,17974),
(245,"2/9",25.8,6.348,22734),
(246,"3/9",35.8,4.301,27005),
(247,"4/9",38.5,3.566,29235),
(248,"5/9",40,2.982,35929),
(249,"6/9",39.7,4.533,28195),
(250,"7/9",39.5,4.183,34868),
(251,"8/9",37.2,3.644,33983),
(252,"9/9",36,6.427,20842),
(253,"10/9",35.1,6.764,17919),
(254,"11/9",27.7,5.442,23984),
(255,"12/9",22.3,6.304,19223),
(256,"13/9",21.9,8.214,12002),
(257,"14/9",32.4,4.571,25991),
(258,"15/9",33.9,5.756,29108),
(259,"16/9",23.8,5.351,15700),
(260,"17/9",15.5,4.64,13223),
(261,"18/9",22.6,5.534,18639),
(262,"19/9",18.9,4.988,14559),
(263,"20/9",14.5,6.691,5768),
(264,"21/9",3.8,4.449,1689),
(265,"22/9",12.7,4.088,10242),
(266,"23/9",26.2,19.344,21650),
(267,"24/9",36.3,5.003,32908),
(268,"25/9",27.5,4.894,24465),
(269,"26/9",22.2,2.879,19399),
(270,"27/9",22.3,4.784,18837),
(271,"28/9",23.7,6.755,13975),
(272,"29/9",9.5,9.33,3329),
(273,"30/9",27.4,20.213,19114),
(274,"1/10",32.6,27.258,25756),
(275,"2/10",24.8,4.58,20453),
(276,"3/10",17.7,6.402,14117),
(277,"4/10",15.7,20.495,6263),
(278,"5/10",18.3,10.62,10873),
(279,"6/10",22.2,10.66,14518),
(280,"7/10",27.9,5.519,20580),
(281,"8/10",24.9,35.655,11392),
(282,"9/10",13.3,15.702,9634),
(283,"10/10",25.4,6.52,11414),
(284,"11/10",19.7,3.672,15320),
(285,"12/10",5.1,5.803,3156),
(286,"13/10",7.9,8.912,3366),
(287,"14/10",18.3,29.356,11309),
(288,"15/10",14.1,17.159,11584),
(289,"16/10",19.8,4.342,17560),
(290,"17/10",25.9,4.165,20149),
(291,"18/10",14.3,16.187,4017),
(292,"19/10",10.8,38.211,6267),
(293,"20/10",2.7,5.016,0.68),
(294,"21/10",14.2,10.072,11749),
(295,"22/10",11.8,53.593,8253),
(296,"23/10",7.7,8.051,5419),
(297,"24/10",13.7,10.857,9919),
(298,"25/10",2.2,21.836,129),
(299,"26/10",8,35.53,5619),
(300,"27/10",9.5,15.919,4832),
(301,"28/10",14.1,43.417,9708),
(302,"29/10",9.8,6.654,6629),
(303,"30/10",3.6,4.891,1297),
(304,"31/10",8.9,10.848,3253),
(305,"1/11",8,4.418,5348),
(306,"2/11",8.6,2.115,7205),
(307,"3/11",17,2.204,15613),
(308,"4/11",4.8,8.979,2753),
(309,"5/11",5.7,15.624,1236),
(310,"6/11",12.7,31.401,10056),
(311,"7/11",11.1,42.122,7225),
(312,"8/11",7.9,8.195,5805),
(313,"9/11",11.7,28.415,7563),
(314,"10/11",4,8.973,2641),
(315,"11/11",10.2,8.851,6172),
(316,"12/11",7.2,8.937,3395),
(317,"13/11",3.1,7.785,1587),
(318,"14/11",1.1,51.462,44),
(319,"15/11",12.4,5.525,9534),
(320,"16/11",2.1,6.805,385),
(321,"17/11",4.8,28.2,2.23),
(322,"18/11",0.8,33.479,0),
(323,"19/11",8.6,10.436,6327),
(324,"20/11",3.2,63.657,442),
(325,"21/11",2.5,8.148,1187),
(326,"22/11",5.4,9.319,2855),
(327,"23/11",4.7,39.774,1076),
(328,"24/11",5.9,50.546,3689),
(329,"25/11",12.3,23.782,10347),
(330,"26/11",3,32.103,1570),
(331,"27/11",0.6,30.632,0),
(332,"28/11",15.7,16.35,9199),
(333,"29/11",7.5,37.787,4306),
(334,"30/11",2.3,5.998,990),
(335,"1/12",1.7,18.211,570),
(336,"2/12",12.9,41.092,10884),
(337,"3/12",3.4,12.913,721),
(338,"4/12",1.9,7.386,758),
(339,"5/12",0.6,31.181,420),
(340,"6/12",4,23.098,1960),
(341,"7/12",7.2,7.042,4979),
(342,"8/12",1.5,21.92,46),
(343,"9/12",0.9,49.056,0),
(344,"10/12",5.2,18.342,962),
(345,"11/12",2.3,10.547,645),
(346,"12/12",3.1,6.515,638),
(347,"13/12",1.9,15.906,199),
(348,"14/12",4,45.648,0),
(349,"15/12",2,6.26,374),
(350,"16/12",2,7.077,95),
(351,"17/12",14.5,17.404,92),
(352,"18/12",1.2,7.134,0),
(353,"19/12",0.1,20.359,0),
(354,"20/12",3.6,39.621,1573),
(355,"21/12",2.4,14.92,259),
(356,"22/12",1.2,49.625,100),
(357,"23/12",1.9,27.17,372),
(358,"24/12",0.6,15.159,0),
(359,"25/12",0.6,0,0),
(360,"26/12",0,0,0),
(361,"27/12",0,0,0),
(362,"28/12",0,0,0),
(363,"29/12",0,0,0),
(364,"30/12",0,0,0),
(365,"31/12",0,0,0),
        }
    },
        { 2024, new List<(int DayNumber, string DayMonth, double Production, double Usage, double Injection)>{
            (1,"1/1",0,0,0),
(2,"2/1",0,0,0),
(3,"3/1",0,0,0),
(4,"4/1",0,0,0),
(5,"5/1",0,0,0),
(6,"6/1",0,0,0),
(7,"7/1",0,0,0),
(8,"8/1",0,0,0),
(9,"9/1",0,0,0),
(10,"10/1",0,0,0),
(11,"11/1",0,0,0),
(12,"12/1",0,0,0),
(13,"13/1",0,0,0),
(14,"14/1",0,0,0),
(15,"15/1",0,0,0),
(16,"16/1",0,0,0),
(17,"17/1",0,0,0),
(18,"18/1",0,0,0),
(19,"19/1",0,0,0),
(20,"20/1",0,0,0),
(21,"21/1",0,0,0),
(22,"22/1",0,0,0),
(23,"23/1",0,0,0),
(24,"24/1",0,0,0),
(25,"25/1",0,0,0),
(26,"26/1",0,0,0),
(27,"27/1",0,0,0),
(28,"28/1",0,0,0),
(29,"29/1",0,0,0),
(30,"30/1",0,0,0),
(31,"31/1",0,0,0),
(32,"1/2",0,0,0),
(33,"2/2",0,0,0),
(34,"3/2",0,0,0),
(35,"4/2",0,0,0),
(36,"5/2",0,0,0),
(37,"6/2",0,0,0),
(38,"7/2",0,0,0),
(39,"8/2",0,0,0),
(40,"9/2",0,0,0),
(41,"10/2",0,0,0),
(42,"11/2",0,0,0),
(43,"12/2",0,0,0),
(44,"13/2",0,0,0),
(45,"14/2",0,0,0),
(46,"15/2",0,0,0),
(47,"16/2",0,0,0),
(48,"17/2",0,0,0),
(49,"18/2",0,0,0),
(50,"19/2",0,0,0),
(51,"20/2",0,0,0),
(52,"21/2",0,0,0),
(53,"22/2",0,0,0),
(54,"23/2",0,0,0),
(55,"24/2",0,0,0),
(56,"25/2",0,0,0),
(57,"26/2",0,0,0),
(58,"27/2",0,0,0),
(59,"28/2",0,0,0),
(60,"29/2",0,0,0),
(61,"1/3",0,0,0),
(62,"2/3",0,0,0),
(63,"3/3",0,0,0),
(64,"4/3",0,0,0),
(65,"5/3",0,0,0),
(66,"6/3",0,0,0),
(67,"7/3",0,0,0),
(68,"8/3",0,0,0),
(69,"9/3",0,0,0),
(70,"10/3",0,0,0),
(71,"11/3",0,0,0),
(72,"12/3",0,0,0),
(73,"13/3",0,0,0),
(74,"14/3",0,0,0),
(75,"15/3",0,0,0),
(76,"16/3",0,0,0),
(77,"17/3",0,0,0),
(78,"18/3",0,0,0),
(79,"19/3",0,0,0),
(80,"20/3",0,0,0),
(81,"21/3",0,0,0),
(82,"22/3",0,0,0),
(83,"23/3",0,0,0),
(84,"24/3",0,0,0),
(85,"25/3",0,0,0),
(86,"26/3",0,0,0),
(87,"27/3",0,0,0),
(88,"28/3",0,0,0),
(89,"29/3",0,0,0),
(90,"30/3",0,0,0),
(91,"31/3",0,0,0),
(92,"1/4",0,0,0),
(93,"2/4",0,0,0),
(94,"3/4",0,0,0),
(95,"4/4",0,0,0),
(96,"5/4",0,0,0),
(97,"6/4",0,0,0),
(98,"7/4",0,0,0),
(99,"8/4",0,0,0),
(100,"9/4",0,0,0),
(101,"10/4",0,0,0),
(102,"11/4",0,0,0),
(103,"12/4",0,0,0),
(104,"13/4",0,0,0),
(105,"14/4",0,0,0),
(106,"15/4",0,0,0),
(107,"16/4",0,0,0),
(108,"17/4",0,0,0),
(109,"18/4",0,0,0),
(110,"19/4",0,0,0),
(111,"20/4",0,0,0),
(112,"21/4",0,0,0),
(113,"22/4",0,0,0),
(114,"23/4",0,0,0),
(115,"24/4",0,0,0),
(116,"25/4",0,0,0),
(117,"26/4",0,0,0),
(118,"27/4",0,0,0),
(119,"28/4",0,0,0),
(120,"29/4",0,0,0),
(121,"30/4",0,0,0),
(122,"1/5",0,0,0),
(123,"2/5",0,0,0),
(124,"3/5",0,0,0),
(125,"4/5",0,0,0),
(126,"5/5",0,0,0),
(127,"6/5",0,0,0),
(128,"7/5",0,0,0),
(129,"8/5",0,0,0),
(130,"9/5",0,0,0),
(131,"10/5",0,0,0),
(132,"11/5",0,0,0),
(133,"12/5",0,0,0),
(134,"13/5",0,0,0),
(135,"14/5",0,0,0),
(136,"15/5",0,0,0),
(137,"16/5",0,0,0),
(138,"17/5",0,0,0),
(139,"18/5",0,0,0),
(140,"19/5",0,0,0),
(141,"20/5",0,0,0),
(142,"21/5",0,0,0),
(143,"22/5",0,0,0),
(144,"23/5",0,0,0),
(145,"24/5",0,0,0),
(146,"25/5",0,0,0),
(147,"26/5",0,0,0),
(148,"27/5",0,0,0),
(149,"28/5",0,0,0),
(150,"29/5",0,0,0),
(151,"30/5",0,0,0),
(152,"31/5",0,0,0),
(153,"1/6",0,0,0),
(154,"2/6",0,0,0),
(155,"3/6",0,0,0),
(156,"4/6",0,0,0),
(157,"5/6",0,0,0),
(158,"6/6",0,0,0),
(159,"7/6",0,0,0),
(160,"8/6",0,0,0),
(161,"9/6",0,0,0),
(162,"10/6",0,0,0),
(163,"11/6",0,0,0),
(164,"12/6",0,0,0),
(165,"13/6",0,0,0),
(166,"14/6",0,0,0),
(167,"15/6",0,0,0),
(168,"16/6",0,0,0),
(169,"17/6",0,0,0),
(170,"18/6",0,0,0),
(171,"19/6",0,0,0),
(172,"20/6",0,0,0),
(173,"21/6",0,0,0),
(174,"22/6",0,0,0),
(175,"23/6",0,0,0),
(176,"24/6",0,0,0),
(177,"25/6",0,0,0),
(178,"26/6",0,0,0),
(179,"27/6",0,0,0),
(180,"28/6",0,0,0),
(181,"29/6",0,0,0),
(182,"30/6",0,0,0),
(183,"1/7",0,0,0),
(184,"2/7",0,0,0),
(185,"3/7",0,0,0),
(186,"4/7",0,0,0),
(187,"5/7",0,0,0),
(188,"6/7",0,0,0),
(189,"7/7",0,0,0),
(190,"8/7",0,0,0),
(191,"9/7",0,0,0),
(192,"10/7",0,0,0),
(193,"11/7",0,0,0),
(194,"12/7",0,0,0),
(195,"13/7",0,0,0),
(196,"14/7",0,0,0),
(197,"15/7",0,0,0),
(198,"16/7",0,0,0),
(199,"17/7",0,0,0),
(200,"18/7",0,0,0),
(201,"19/7",0,0,0),
(202,"20/7",0,0,0),
(203,"21/7",0,0,0),
(204,"22/7",0,0,0),
(205,"23/7",0,0,0),
(206,"24/7",0,0,0),
(207,"25/7",0,0,0),
(208,"26/7",0,0,0),
(209,"27/7",0,0,0),
(210,"28/7",0,0,0),
(211,"29/7",0,0,0),
(212,"30/7",0,0,0),
(213,"31/7",0,0,0),
(214,"1/8",0,0,0),
(215,"2/8",0,0,0),
(216,"3/8",0,0,0),
(217,"4/8",0,0,0),
(218,"5/8",0,0,0),
(219,"6/8",0,0,0),
(220,"7/8",0,0,0),
(221,"8/8",0,0,0),
(222,"9/8",0,0,0),
(223,"10/8",0,0,0),
(224,"11/8",0,0,0),
(225,"12/8",0,0,0),
(226,"13/8",0,0,0),
(227,"14/8",0,0,0),
(228,"15/8",0,0,0),
(229,"16/8",0,0,0),
(230,"17/8",0,0,0),
(231,"18/8",0,0,0),
(232,"19/8",0,0,0),
(233,"20/8",0,0,0),
(234,"21/8",0,0,0),
(235,"22/8",0,0,0),
(236,"23/8",0,0,0),
(237,"24/8",0,0,0),
(238,"25/8",0,0,0),
(239,"26/8",0,0,0),
(240,"27/8",0,0,0),
(241,"28/8",0,0,0),
(242,"29/8",0,0,0),
(243,"30/8",0,0,0),
(244,"31/8",0,0,0),
(245,"1/9",0,0,0),
(246,"2/9",0,0,0),
(247,"3/9",0,0,0),
(248,"4/9",0,0,0),
(249,"5/9",0,0,0),
(250,"6/9",0,0,0),
(251,"7/9",0,0,0),
(252,"8/9",0,0,0),
(253,"9/9",0,0,0),
(254,"10/9",0,0,0),
(255,"11/9",0,0,0),
(256,"12/9",0,0,0),
(257,"13/9",0,0,0),
(258,"14/9",0,0,0),
(259,"15/9",0,0,0),
(260,"16/9",0,0,0),
(261,"17/9",0,0,0),
(262,"18/9",0,0,0),
(263,"19/9",0,0,0),
(264,"20/9",0,0,0),
(265,"21/9",0,0,0),
(266,"22/9",0,0,0),
(267,"23/9",0,0,0),
(268,"24/9",0,0,0),
(269,"25/9",0,0,0),
(270,"26/9",0,0,0),
(271,"27/9",0,0,0),
(272,"28/9",0,0,0),
(273,"29/9",0,0,0),
(274,"30/9",0,0,0),
(275,"1/10",0,0,0),
(276,"2/10",0,0,0),
(277,"3/10",0,0,0),
(278,"4/10",0,0,0),
(279,"5/10",0,0,0),
(280,"6/10",0,0,0),
(281,"7/10",0,0,0),
(282,"8/10",0,0,0),
(283,"9/10",0,0,0),
(284,"10/10",0,0,0),
(285,"11/10",0,0,0),
(286,"12/10",0,0,0),
(287,"13/10",0,0,0),
(288,"14/10",0,0,0),
(289,"15/10",0,0,0),
(290,"16/10",0,0,0),
(291,"17/10",0,0,0),
(292,"18/10",0,0,0),
(293,"19/10",0,0,0),
(294,"20/10",0,0,0),
(295,"21/10",0,0,0),
(296,"22/10",0,0,0),
(297,"23/10",0,0,0),
(298,"24/10",0,0,0),
(299,"25/10",0,0,0),
(300,"26/10",0,0,0),
(301,"27/10",0,0,0),
(302,"28/10",0,0,0),
(303,"29/10",0,0,0),
(304,"30/10",0,0,0),
(305,"31/10",0,0,0),
(306,"1/11",0,0,0),
(307,"2/11",0,0,0),
(308,"3/11",0,0,0),
(309,"4/11",0,0,0),
(310,"5/11",0,0,0),
(311,"6/11",0,0,0),
(312,"7/11",0,0,0),
(313,"8/11",0,0,0),
(314,"9/11",0,0,0),
(315,"10/11",0,0,0),
(316,"11/11",0,0,0),
(317,"12/11",0,0,0),
(318,"13/11",0,0,0),
(319,"14/11",0,0,0),
(320,"15/11",0,0,0),
(321,"16/11",0,0,0),
(322,"17/11",0,0,0),
(323,"18/11",0,0,0),
(324,"19/11",0,0,0),
(325,"20/11",0,0,0),
(326,"21/11",0,0,0),
(327,"22/11",0,0,0),
(328,"23/11",0,0,0),
(329,"24/11",0,0,0),
(330,"25/11",0,0,0),
(331,"26/11",0,0,0),
(332,"27/11",0,0,0),
(333,"28/11",0,0,0),
(334,"29/11",0,0,0),
(335,"30/11",0,0,0),
(336,"1/12",0,0,0),
(337,"2/12",0,0,0),
(338,"3/12",0,0,0),
(339,"4/12",0,0,0),
(340,"5/12",0,0,0),
(341,"6/12",0,0,0),
(342,"7/12",0,0,0),
(343,"8/12",0,0,0),
(344,"9/12",0,0,0),
(345,"10/12",0,0,0),
(346,"11/12",0,0,0),
(347,"12/12",0,0,0),
(348,"13/12",0,0,0),
(349,"14/12",0,0,0),
(350,"15/12",0,0,0),
(351,"16/12",0,0,0),
(352,"17/12",0,0,0),
(353,"18/12",0,0,0),
(354,"19/12",0,0,0),
(355,"20/12",0,0,0),
(356,"21/12",0,0,0),
(357,"22/12",0,0,0),
(358,"23/12",0,0,0),
(359,"24/12",0,0,0),
(360,"25/12",0,0,0),
(361,"26/12",0,0,0),
(362,"27/12",0,0,0),
(363,"28/12",0,0,0),
(364,"29/12",0,0,0),
(365,"30/12",0,0,0),
(366,"31/12",0,0,0),
    } }
    };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderSolarPanelsAsync(selectedYearIndex, firstRender);
            await RenderSolarPanelsWeekAsync(selectedYearIndex, selectedWeekIndex, firstRender);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SolarPanelsAsync(List<string> labels, List<double> production, List<double> usage, List<double> injection, string title, bool init, BarChart barChart, string xTitle = "Months")
    {
        var data = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>()
                {
                    new BarChartDataset()
                    {
                        Label = "Production",
                        Data = production,
                        BackgroundColor = new List<string>{ "rgb(0,0,0)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Net Injection",
                        Data = injection,
                        BackgroundColor = new List<string> { "rgb(243,167,18)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Net Usage",
                        Data = usage,
                        BackgroundColor = new List<string> { "rgb(231,105,149)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Total Usage",
                        Data = production.Zip(injection, (first, second) => new { first, second })
                          .Zip(usage, (previous, last) => previous.first + last - previous.second)
                          .ToList(),
                        BackgroundColor = new List<string> { "rgb(170,240,104)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    }
                }
            };


        options.Plugins!.Title!.Text = title;

        if (init)
        {
            options.Interaction.Mode = InteractionMode.Index;
            options.Plugins.Title.Display = true;
            options.Plugins.Title.Font!.Size = 20;

            options.Responsive = true;

            options.Scales.X!.Title!.Text = xTitle;
            options.Scales.X.Title.Display = true;

            options.Scales.Y!.Title!.Text = "kWh";
            options.Scales.Y.Title.Display = true;

            await barChart.InitializeAsync(data, options);
        }

        else
            await barChart.UpdateAsync(data, options);
    }

    private async Task RenderSolarPanelsAsync(int yearIndex, bool init)
    {

        var selectedYear = years[yearIndex];

        await SolarPanelsAsync(
            new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" },
            dataMonthly[selectedYear].production,
            dataMonthly[selectedYear].usage,
            dataMonthly[selectedYear].injection,
            $"Solar Panels ({selectedYear})", init, barChartMonth!
        );

        totalP = (int)dataMonthly[selectedYear].production.Sum();
        totalNi = (int)dataMonthly[selectedYear].injection.Sum();
        totalNu = (int)dataMonthly[selectedYear].usage.Sum();
        totalU = (int)totalP + totalNu - totalNi;

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RenderSolarPanelsWeekAsync(int yearIndex, int weekIndex, bool init)
    {

        var selectedYear = years[yearIndex];
        var selectedWeek = weeks[weekIndex];

        var t = dataDaily[selectedYear].Where(a => GetWeekOfYear(a.DayNumber, selectedYear) == selectedWeek).ToList();

        await SolarPanelsAsync(
            t.Select(s => s.DayMonth).ToList(),
            t.Select(s => s.Production).ToList(),
            t.Select(s => s.Usage).ToList(),
            t.Select(s => s.Injection / 1000).ToList(),
            $"Solar Panels ({selectedYear}/{selectedWeek})", init, barChartWeek!, "Days"
        );
    }

    static CultureInfo ci = new CultureInfo("nl-BE");

    int selectedYearIndex = years.FindIndex(0, 1, f => f == DateTime.Now.Year);
    int selectedWeekIndex = ci.Calendar.GetWeekOfYear(DateTime.Now, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek) - 1;

    int totalP = 0;
    int totalNi = 0;
    int totalNu = 0;
    int totalU = 0;

    static int GetWeekOfYear(int dayOfYear, int year)
    {
        // Create a date for the specified day of the specified year
        DateTime date = new DateTime(year, 1, 1).AddDays(dayOfYear - 1);


        // Get the Calendar instance associated with a CultureInfo
        Calendar calendar = ci.Calendar;

        // Specify the rules for the week of the year
        CalendarWeekRule weekRule = ci.DateTimeFormat.CalendarWeekRule;
        DayOfWeek firstDayOfWeek = ci.DateTimeFormat.FirstDayOfWeek;

        // Get the week of the year
        int weekOfYear = calendar.GetWeekOfYear(date, weekRule, firstDayOfWeek);

        // Check if the week number belongs to the previous year
        if (date.Month == 1 && weekOfYear > 50)
        {
            return 1;
        }

        return weekOfYear;
    }

    BarChartOptions options = new BarChartOptions();
    BarChartOptions optionsWeek = new BarChartOptions();

    private async Task YearChangedAsync()
    {
        await RenderSolarPanelsAsync(selectedYearIndex, false);
    }

    private async Task WeekChangedAsync()
    {
        await RenderSolarPanelsWeekAsync(selectedYearIndex, selectedWeekIndex, false);
    }
}
